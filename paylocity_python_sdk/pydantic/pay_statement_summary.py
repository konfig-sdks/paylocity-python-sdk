# coding: utf-8

"""
    WebLink API

    For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

    The version of the OpenAPI document: v2
    Contact: webservices@paylocity.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel


class PayStatementSummary(BaseModel):
    # .<br />
    auto_pay: typing.Optional[bool] = Field(None, alias='autoPay')

    # .<br />
    begin_date: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='beginDate')

    # .<br />
    check_date: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='checkDate')

    # .<br />
    check_number: typing.Optional[int] = Field(None, alias='checkNumber')

    # .<br />
    direct_deposit_amount: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='directDepositAmount')

    # .<br />
    end_date: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='endDate')

    # .<br />
    gross_pay: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='grossPay')

    # .<br />
    hours: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='hours')

    # .<br />
    net_check: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='netCheck')

    # .<br />
    net_pay: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='netPay')

    # .<br />
    overtime_dollars: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='overtimeDollars')

    # .<br />
    overtime_hours: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='overtimeHours')

    # .<br />
    process: typing.Optional[int] = Field(None, alias='process')

    # .<br />
    regular_dollars: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='regularDollars')

    # .<br />
    regular_hours: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='regularHours')

    # <br />
    transaction_number: typing.Optional[int] = Field(None, alias='transactionNumber')

    # .<br />
    voucher_number: typing.Optional[int] = Field(None, alias='voucherNumber')

    # .<br />
    workers_comp_code: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='workersCompCode')

    # .<br />
    year: typing.Optional[int] = Field(None, alias='year')
    class Config:
        arbitrary_types_allowed = True
