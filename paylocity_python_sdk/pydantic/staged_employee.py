# coding: utf-8

"""
    WebLink API

    For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

    The version of the OpenAPI document: v2
    Contact: webservices@paylocity.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from paylocity_python_sdk.pydantic.staged_employee_additional_direct_deposit import StagedEmployeeAdditionalDirectDeposit
from paylocity_python_sdk.pydantic.staged_employee_benefit_setup import StagedEmployeeBenefitSetup
from paylocity_python_sdk.pydantic.staged_employee_custom_boolean_fields import StagedEmployeeCustomBooleanFields
from paylocity_python_sdk.pydantic.staged_employee_custom_date_fields import StagedEmployeeCustomDateFields
from paylocity_python_sdk.pydantic.staged_employee_custom_drop_down_fields import StagedEmployeeCustomDropDownFields
from paylocity_python_sdk.pydantic.staged_employee_custom_number_fields import StagedEmployeeCustomNumberFields
from paylocity_python_sdk.pydantic.staged_employee_custom_text_fields import StagedEmployeeCustomTextFields
from paylocity_python_sdk.pydantic.staged_employee_department_position import StagedEmployeeDepartmentPosition
from paylocity_python_sdk.pydantic.staged_employee_federal_tax import StagedEmployeeFederalTax
from paylocity_python_sdk.pydantic.staged_employee_home_address import StagedEmployeeHomeAddress
from paylocity_python_sdk.pydantic.staged_employee_local_tax import StagedEmployeeLocalTax
from paylocity_python_sdk.pydantic.staged_employee_main_direct_deposit import StagedEmployeeMainDirectDeposit
from paylocity_python_sdk.pydantic.staged_employee_non_primary_state_tax import StagedEmployeeNonPrimaryStateTax
from paylocity_python_sdk.pydantic.staged_employee_primary_pay_rate import StagedEmployeePrimaryPayRate
from paylocity_python_sdk.pydantic.staged_employee_primary_state_tax import StagedEmployeePrimaryStateTax
from paylocity_python_sdk.pydantic.staged_employee_status import StagedEmployeeStatus
from paylocity_python_sdk.pydantic.staged_employee_work_address import StagedEmployeeWorkAddress
from paylocity_python_sdk.pydantic.staged_employee_work_eligibility import StagedEmployeeWorkEligibility

class StagedEmployee(BaseModel):
    additional_direct_deposit: typing.Optional[StagedEmployeeAdditionalDirectDeposit] = Field(None, alias='additionalDirectDeposit')

    benefit_setup: typing.Optional[StagedEmployeeBenefitSetup] = Field(None, alias='benefitSetup')

    # Employee birthdate. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
    birth_date: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='birthDate')

    custom_boolean_fields: typing.Optional[StagedEmployeeCustomBooleanFields] = Field(None, alias='customBooleanFields')

    custom_date_fields: typing.Optional[StagedEmployeeCustomDateFields] = Field(None, alias='customDateFields')

    custom_drop_down_fields: typing.Optional[StagedEmployeeCustomDropDownFields] = Field(None, alias='customDropDownFields')

    custom_number_fields: typing.Optional[StagedEmployeeCustomNumberFields] = Field(None, alias='customNumberFields')

    custom_text_fields: typing.Optional[StagedEmployeeCustomTextFields] = Field(None, alias='customTextFields')

    department_position: typing.Optional[StagedEmployeeDepartmentPosition] = Field(None, alias='departmentPosition')

    # Indicates if employee has disability status.
    disability_description: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='disabilityDescription')

    # Leave blank to have Paylocity Payroll/HR solution automatically assign the next available employee ID.<br  /> Max length: 10
    employee_id: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='employeeId')

    # Employee ethnicity.<br  /> Max length: 10
    ethnicity: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='ethnicity')

    federal_tax: typing.Optional[StagedEmployeeFederalTax] = Field(None, alias='federalTax')

    # Employee first name. <br  />Max length: 40
    first_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='firstName')

    # Reason code for FITW exemption. Common values are *SE* (Statutory employee), *CR* (clergy/Religious). <br  /> Max length: 30
    fitw_exempt_reason: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='fitwExemptReason')

    # Reason code for FUTA exemption. Common values are *501* (5019c)(3) Organization), *IC* (Independent Contractor).<br  /> Max length: 30
    futa_exempt_reason: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='futaExemptReason')

    # Employee gender. Common values *M* (Male), *F* (Female). <br  />Max length: 1
    gender: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='gender')

    home_address: typing.Optional[StagedEmployeeHomeAddress] = Field(None, alias='homeAddress')

    # Indicates if employee in agriculture or farming.
    is_employee943: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='isEmployee943')

    # Indicates if employee is a smoker.
    is_smoker: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='isSmoker')

    # Employee last name. <br  />Max length: 40
    last_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='lastName')

    local_tax: typing.Optional[StagedEmployeeLocalTax] = Field(None, alias='localTax')

    main_direct_deposit: typing.Optional[StagedEmployeeMainDirectDeposit] = Field(None, alias='mainDirectDeposit')

    # Employee marital status. Common values *D (Divorced), M (Married), S (Single), W (Widowed)*. <br  />Max length: 10
    marital_status: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='maritalStatus')

    # Reason code for Medicare exemption. Common values are *501* (5019c)(3) Organization), *IC* (Independent Contractor).<br  /> Max length: 30
    med_exempt_reason: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='medExemptReason')

    # Employee middle name.<br  /> Max length: 20
    middle_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='middleName')

    non_primary_state_tax: typing.Optional[StagedEmployeeNonPrimaryStateTax] = Field(None, alias='nonPrimaryStateTax')

    # Employee preferred display name.<br  /> Max length: 20
    preferred_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='preferredName')

    primary_pay_rate: typing.Optional[StagedEmployeePrimaryPayRate] = Field(None, alias='primaryPayRate')

    primary_state_tax: typing.Optional[StagedEmployeePrimaryStateTax] = Field(None, alias='primaryStateTax')

    # Prior last name if applicable.<br  />Max length: 40
    prior_last_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='priorLastName')

    # Employee preferred salutation. <br  />Max length: 10
    salutation: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='salutation')

    # Reason code for SITW exemption. Common values are *SE* (Statutory employee), *CR* (clergy/Religious). <br  /> Max length: 30
    sitw_exempt_reason: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='sitwExemptReason')

    # Reason code for Social Security exemption. Common values are *SE* (Statutory employee), *CR* (clergy/Religious). <br  /> Max length: 30
    ss_exempt_reason: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='ssExemptReason')

    # Employee social security number. Leave it blank if valid social security number not available. <br  />Max length: 11
    ssn: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='ssn')

    status: typing.Optional[StagedEmployeeStatus] = Field(None, alias='status')

    # Employee name suffix. Common values are *Jr, Sr, II*.<br  />Max length: 30
    suffix: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='suffix')

    # Reason code for SUI exemption. Common values are *SE* (Statutory employee), *CR* (clergy/Religious). <br  /> Max length: 30
    sui_exempt_reason: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='suiExemptReason')

    # Employee SUI (State Unemployment Insurance) state. <br  />Max length: 2
    sui_state: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='suiState')

    # Employee 1099R distribution code. Common values are *7* (Normal Distribution), *F* (Charitable Gift Annuity). <br  />Max length: 1
    tax_distribution_code1099_r: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='taxDistributionCode1099R')

    # Employee tax form for reporting income. Valid values are *W2, 1099M, 1099R*. Default is W2. <br  />Max length: 15
    tax_form: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='taxForm')

    # Indicates if employee is a veteran.
    veteran_description: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='veteranDescription')

    # Add Web Time badge number and charge rate and synchronize Paylocity Payroll/HR solution and Web Time employee data.
    web_time: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='webTime')

    work_address: typing.Optional[StagedEmployeeWorkAddress] = Field(None, alias='workAddress')

    work_eligibility: typing.Optional[StagedEmployeeWorkEligibility] = Field(None, alias='workEligibility')
    class Config:
        arbitrary_types_allowed = True
