# coding: utf-8

"""
    WebLink API

    For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

    The version of the OpenAPI document: v2
    Contact: webservices@paylocity.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paylocity_python_sdk import schemas  # noqa: F401


class StagedEmployee(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The staged employee model
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def additionalDirectDeposit() -> typing.Type['StagedEmployeeAdditionalDirectDeposit']:
                return StagedEmployeeAdditionalDirectDeposit
        
            @staticmethod
            def benefitSetup() -> typing.Type['StagedEmployeeBenefitSetup']:
                return StagedEmployeeBenefitSetup
            birthDate = schemas.DictSchema
        
            @staticmethod
            def customBooleanFields() -> typing.Type['StagedEmployeeCustomBooleanFields']:
                return StagedEmployeeCustomBooleanFields
        
            @staticmethod
            def customDateFields() -> typing.Type['StagedEmployeeCustomDateFields']:
                return StagedEmployeeCustomDateFields
        
            @staticmethod
            def customDropDownFields() -> typing.Type['StagedEmployeeCustomDropDownFields']:
                return StagedEmployeeCustomDropDownFields
        
            @staticmethod
            def customNumberFields() -> typing.Type['StagedEmployeeCustomNumberFields']:
                return StagedEmployeeCustomNumberFields
        
            @staticmethod
            def customTextFields() -> typing.Type['StagedEmployeeCustomTextFields']:
                return StagedEmployeeCustomTextFields
        
            @staticmethod
            def departmentPosition() -> typing.Type['StagedEmployeeDepartmentPosition']:
                return StagedEmployeeDepartmentPosition
            disabilityDescription = schemas.DictSchema
            employeeId = schemas.DictSchema
            ethnicity = schemas.DictSchema
        
            @staticmethod
            def federalTax() -> typing.Type['StagedEmployeeFederalTax']:
                return StagedEmployeeFederalTax
            firstName = schemas.DictSchema
            fitwExemptReason = schemas.DictSchema
            futaExemptReason = schemas.DictSchema
            gender = schemas.DictSchema
        
            @staticmethod
            def homeAddress() -> typing.Type['StagedEmployeeHomeAddress']:
                return StagedEmployeeHomeAddress
            isEmployee943 = schemas.DictSchema
            isSmoker = schemas.DictSchema
            lastName = schemas.DictSchema
        
            @staticmethod
            def localTax() -> typing.Type['StagedEmployeeLocalTax']:
                return StagedEmployeeLocalTax
        
            @staticmethod
            def mainDirectDeposit() -> typing.Type['StagedEmployeeMainDirectDeposit']:
                return StagedEmployeeMainDirectDeposit
            maritalStatus = schemas.DictSchema
            medExemptReason = schemas.DictSchema
            middleName = schemas.DictSchema
        
            @staticmethod
            def nonPrimaryStateTax() -> typing.Type['StagedEmployeeNonPrimaryStateTax']:
                return StagedEmployeeNonPrimaryStateTax
            preferredName = schemas.DictSchema
        
            @staticmethod
            def primaryPayRate() -> typing.Type['StagedEmployeePrimaryPayRate']:
                return StagedEmployeePrimaryPayRate
        
            @staticmethod
            def primaryStateTax() -> typing.Type['StagedEmployeePrimaryStateTax']:
                return StagedEmployeePrimaryStateTax
            priorLastName = schemas.DictSchema
            salutation = schemas.DictSchema
            sitwExemptReason = schemas.DictSchema
            ssExemptReason = schemas.DictSchema
            ssn = schemas.DictSchema
        
            @staticmethod
            def status() -> typing.Type['StagedEmployeeStatus']:
                return StagedEmployeeStatus
            suffix = schemas.DictSchema
            suiExemptReason = schemas.DictSchema
            suiState = schemas.DictSchema
            taxDistributionCode1099R = schemas.DictSchema
            taxForm = schemas.DictSchema
            veteranDescription = schemas.DictSchema
            webTime = schemas.DictSchema
        
            @staticmethod
            def workAddress() -> typing.Type['StagedEmployeeWorkAddress']:
                return StagedEmployeeWorkAddress
        
            @staticmethod
            def workEligibility() -> typing.Type['StagedEmployeeWorkEligibility']:
                return StagedEmployeeWorkEligibility
            __annotations__ = {
                "additionalDirectDeposit": additionalDirectDeposit,
                "benefitSetup": benefitSetup,
                "birthDate": birthDate,
                "customBooleanFields": customBooleanFields,
                "customDateFields": customDateFields,
                "customDropDownFields": customDropDownFields,
                "customNumberFields": customNumberFields,
                "customTextFields": customTextFields,
                "departmentPosition": departmentPosition,
                "disabilityDescription": disabilityDescription,
                "employeeId": employeeId,
                "ethnicity": ethnicity,
                "federalTax": federalTax,
                "firstName": firstName,
                "fitwExemptReason": fitwExemptReason,
                "futaExemptReason": futaExemptReason,
                "gender": gender,
                "homeAddress": homeAddress,
                "isEmployee943": isEmployee943,
                "isSmoker": isSmoker,
                "lastName": lastName,
                "localTax": localTax,
                "mainDirectDeposit": mainDirectDeposit,
                "maritalStatus": maritalStatus,
                "medExemptReason": medExemptReason,
                "middleName": middleName,
                "nonPrimaryStateTax": nonPrimaryStateTax,
                "preferredName": preferredName,
                "primaryPayRate": primaryPayRate,
                "primaryStateTax": primaryStateTax,
                "priorLastName": priorLastName,
                "salutation": salutation,
                "sitwExemptReason": sitwExemptReason,
                "ssExemptReason": ssExemptReason,
                "ssn": ssn,
                "status": status,
                "suffix": suffix,
                "suiExemptReason": suiExemptReason,
                "suiState": suiState,
                "taxDistributionCode1099R": taxDistributionCode1099R,
                "taxForm": taxForm,
                "veteranDescription": veteranDescription,
                "webTime": webTime,
                "workAddress": workAddress,
                "workEligibility": workEligibility,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalDirectDeposit"]) -> 'StagedEmployeeAdditionalDirectDeposit': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitSetup"]) -> 'StagedEmployeeBenefitSetup': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["birthDate"]) -> MetaOapg.properties.birthDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customBooleanFields"]) -> 'StagedEmployeeCustomBooleanFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customDateFields"]) -> 'StagedEmployeeCustomDateFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customDropDownFields"]) -> 'StagedEmployeeCustomDropDownFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customNumberFields"]) -> 'StagedEmployeeCustomNumberFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customTextFields"]) -> 'StagedEmployeeCustomTextFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departmentPosition"]) -> 'StagedEmployeeDepartmentPosition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disabilityDescription"]) -> MetaOapg.properties.disabilityDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ethnicity"]) -> MetaOapg.properties.ethnicity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["federalTax"]) -> 'StagedEmployeeFederalTax': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fitwExemptReason"]) -> MetaOapg.properties.fitwExemptReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["futaExemptReason"]) -> MetaOapg.properties.futaExemptReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["homeAddress"]) -> 'StagedEmployeeHomeAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isEmployee943"]) -> MetaOapg.properties.isEmployee943: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSmoker"]) -> MetaOapg.properties.isSmoker: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localTax"]) -> 'StagedEmployeeLocalTax': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mainDirectDeposit"]) -> 'StagedEmployeeMainDirectDeposit': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maritalStatus"]) -> MetaOapg.properties.maritalStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["medExemptReason"]) -> MetaOapg.properties.medExemptReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["middleName"]) -> MetaOapg.properties.middleName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nonPrimaryStateTax"]) -> 'StagedEmployeeNonPrimaryStateTax': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferredName"]) -> MetaOapg.properties.preferredName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryPayRate"]) -> 'StagedEmployeePrimaryPayRate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryStateTax"]) -> 'StagedEmployeePrimaryStateTax': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priorLastName"]) -> MetaOapg.properties.priorLastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salutation"]) -> MetaOapg.properties.salutation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sitwExemptReason"]) -> MetaOapg.properties.sitwExemptReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssExemptReason"]) -> MetaOapg.properties.ssExemptReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssn"]) -> MetaOapg.properties.ssn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'StagedEmployeeStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suffix"]) -> MetaOapg.properties.suffix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suiExemptReason"]) -> MetaOapg.properties.suiExemptReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suiState"]) -> MetaOapg.properties.suiState: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxDistributionCode1099R"]) -> MetaOapg.properties.taxDistributionCode1099R: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxForm"]) -> MetaOapg.properties.taxForm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["veteranDescription"]) -> MetaOapg.properties.veteranDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webTime"]) -> MetaOapg.properties.webTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workAddress"]) -> 'StagedEmployeeWorkAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workEligibility"]) -> 'StagedEmployeeWorkEligibility': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["additionalDirectDeposit", "benefitSetup", "birthDate", "customBooleanFields", "customDateFields", "customDropDownFields", "customNumberFields", "customTextFields", "departmentPosition", "disabilityDescription", "employeeId", "ethnicity", "federalTax", "firstName", "fitwExemptReason", "futaExemptReason", "gender", "homeAddress", "isEmployee943", "isSmoker", "lastName", "localTax", "mainDirectDeposit", "maritalStatus", "medExemptReason", "middleName", "nonPrimaryStateTax", "preferredName", "primaryPayRate", "primaryStateTax", "priorLastName", "salutation", "sitwExemptReason", "ssExemptReason", "ssn", "status", "suffix", "suiExemptReason", "suiState", "taxDistributionCode1099R", "taxForm", "veteranDescription", "webTime", "workAddress", "workEligibility", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalDirectDeposit"]) -> typing.Union['StagedEmployeeAdditionalDirectDeposit', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitSetup"]) -> typing.Union['StagedEmployeeBenefitSetup', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["birthDate"]) -> typing.Union[MetaOapg.properties.birthDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customBooleanFields"]) -> typing.Union['StagedEmployeeCustomBooleanFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customDateFields"]) -> typing.Union['StagedEmployeeCustomDateFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customDropDownFields"]) -> typing.Union['StagedEmployeeCustomDropDownFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customNumberFields"]) -> typing.Union['StagedEmployeeCustomNumberFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customTextFields"]) -> typing.Union['StagedEmployeeCustomTextFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departmentPosition"]) -> typing.Union['StagedEmployeeDepartmentPosition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disabilityDescription"]) -> typing.Union[MetaOapg.properties.disabilityDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ethnicity"]) -> typing.Union[MetaOapg.properties.ethnicity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["federalTax"]) -> typing.Union['StagedEmployeeFederalTax', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fitwExemptReason"]) -> typing.Union[MetaOapg.properties.fitwExemptReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["futaExemptReason"]) -> typing.Union[MetaOapg.properties.futaExemptReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union[MetaOapg.properties.gender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["homeAddress"]) -> typing.Union['StagedEmployeeHomeAddress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isEmployee943"]) -> typing.Union[MetaOapg.properties.isEmployee943, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSmoker"]) -> typing.Union[MetaOapg.properties.isSmoker, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localTax"]) -> typing.Union['StagedEmployeeLocalTax', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mainDirectDeposit"]) -> typing.Union['StagedEmployeeMainDirectDeposit', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maritalStatus"]) -> typing.Union[MetaOapg.properties.maritalStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["medExemptReason"]) -> typing.Union[MetaOapg.properties.medExemptReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["middleName"]) -> typing.Union[MetaOapg.properties.middleName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nonPrimaryStateTax"]) -> typing.Union['StagedEmployeeNonPrimaryStateTax', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferredName"]) -> typing.Union[MetaOapg.properties.preferredName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryPayRate"]) -> typing.Union['StagedEmployeePrimaryPayRate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryStateTax"]) -> typing.Union['StagedEmployeePrimaryStateTax', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priorLastName"]) -> typing.Union[MetaOapg.properties.priorLastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salutation"]) -> typing.Union[MetaOapg.properties.salutation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sitwExemptReason"]) -> typing.Union[MetaOapg.properties.sitwExemptReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssExemptReason"]) -> typing.Union[MetaOapg.properties.ssExemptReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssn"]) -> typing.Union[MetaOapg.properties.ssn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['StagedEmployeeStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suffix"]) -> typing.Union[MetaOapg.properties.suffix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suiExemptReason"]) -> typing.Union[MetaOapg.properties.suiExemptReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suiState"]) -> typing.Union[MetaOapg.properties.suiState, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxDistributionCode1099R"]) -> typing.Union[MetaOapg.properties.taxDistributionCode1099R, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxForm"]) -> typing.Union[MetaOapg.properties.taxForm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["veteranDescription"]) -> typing.Union[MetaOapg.properties.veteranDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webTime"]) -> typing.Union[MetaOapg.properties.webTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workAddress"]) -> typing.Union['StagedEmployeeWorkAddress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workEligibility"]) -> typing.Union['StagedEmployeeWorkEligibility', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["additionalDirectDeposit", "benefitSetup", "birthDate", "customBooleanFields", "customDateFields", "customDropDownFields", "customNumberFields", "customTextFields", "departmentPosition", "disabilityDescription", "employeeId", "ethnicity", "federalTax", "firstName", "fitwExemptReason", "futaExemptReason", "gender", "homeAddress", "isEmployee943", "isSmoker", "lastName", "localTax", "mainDirectDeposit", "maritalStatus", "medExemptReason", "middleName", "nonPrimaryStateTax", "preferredName", "primaryPayRate", "primaryStateTax", "priorLastName", "salutation", "sitwExemptReason", "ssExemptReason", "ssn", "status", "suffix", "suiExemptReason", "suiState", "taxDistributionCode1099R", "taxForm", "veteranDescription", "webTime", "workAddress", "workEligibility", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        additionalDirectDeposit: typing.Union['StagedEmployeeAdditionalDirectDeposit', schemas.Unset] = schemas.unset,
        benefitSetup: typing.Union['StagedEmployeeBenefitSetup', schemas.Unset] = schemas.unset,
        birthDate: typing.Union[MetaOapg.properties.birthDate, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        customBooleanFields: typing.Union['StagedEmployeeCustomBooleanFields', schemas.Unset] = schemas.unset,
        customDateFields: typing.Union['StagedEmployeeCustomDateFields', schemas.Unset] = schemas.unset,
        customDropDownFields: typing.Union['StagedEmployeeCustomDropDownFields', schemas.Unset] = schemas.unset,
        customNumberFields: typing.Union['StagedEmployeeCustomNumberFields', schemas.Unset] = schemas.unset,
        customTextFields: typing.Union['StagedEmployeeCustomTextFields', schemas.Unset] = schemas.unset,
        departmentPosition: typing.Union['StagedEmployeeDepartmentPosition', schemas.Unset] = schemas.unset,
        disabilityDescription: typing.Union[MetaOapg.properties.disabilityDescription, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        employeeId: typing.Union[MetaOapg.properties.employeeId, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        ethnicity: typing.Union[MetaOapg.properties.ethnicity, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        federalTax: typing.Union['StagedEmployeeFederalTax', schemas.Unset] = schemas.unset,
        firstName: typing.Union[MetaOapg.properties.firstName, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        fitwExemptReason: typing.Union[MetaOapg.properties.fitwExemptReason, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        futaExemptReason: typing.Union[MetaOapg.properties.futaExemptReason, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        gender: typing.Union[MetaOapg.properties.gender, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        homeAddress: typing.Union['StagedEmployeeHomeAddress', schemas.Unset] = schemas.unset,
        isEmployee943: typing.Union[MetaOapg.properties.isEmployee943, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        isSmoker: typing.Union[MetaOapg.properties.isSmoker, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        lastName: typing.Union[MetaOapg.properties.lastName, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        localTax: typing.Union['StagedEmployeeLocalTax', schemas.Unset] = schemas.unset,
        mainDirectDeposit: typing.Union['StagedEmployeeMainDirectDeposit', schemas.Unset] = schemas.unset,
        maritalStatus: typing.Union[MetaOapg.properties.maritalStatus, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        medExemptReason: typing.Union[MetaOapg.properties.medExemptReason, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        middleName: typing.Union[MetaOapg.properties.middleName, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        nonPrimaryStateTax: typing.Union['StagedEmployeeNonPrimaryStateTax', schemas.Unset] = schemas.unset,
        preferredName: typing.Union[MetaOapg.properties.preferredName, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        primaryPayRate: typing.Union['StagedEmployeePrimaryPayRate', schemas.Unset] = schemas.unset,
        primaryStateTax: typing.Union['StagedEmployeePrimaryStateTax', schemas.Unset] = schemas.unset,
        priorLastName: typing.Union[MetaOapg.properties.priorLastName, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        salutation: typing.Union[MetaOapg.properties.salutation, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        sitwExemptReason: typing.Union[MetaOapg.properties.sitwExemptReason, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        ssExemptReason: typing.Union[MetaOapg.properties.ssExemptReason, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        ssn: typing.Union[MetaOapg.properties.ssn, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        status: typing.Union['StagedEmployeeStatus', schemas.Unset] = schemas.unset,
        suffix: typing.Union[MetaOapg.properties.suffix, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        suiExemptReason: typing.Union[MetaOapg.properties.suiExemptReason, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        suiState: typing.Union[MetaOapg.properties.suiState, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        taxDistributionCode1099R: typing.Union[MetaOapg.properties.taxDistributionCode1099R, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        taxForm: typing.Union[MetaOapg.properties.taxForm, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        veteranDescription: typing.Union[MetaOapg.properties.veteranDescription, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        webTime: typing.Union[MetaOapg.properties.webTime, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        workAddress: typing.Union['StagedEmployeeWorkAddress', schemas.Unset] = schemas.unset,
        workEligibility: typing.Union['StagedEmployeeWorkEligibility', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StagedEmployee':
        return super().__new__(
            cls,
            *args,
            additionalDirectDeposit=additionalDirectDeposit,
            benefitSetup=benefitSetup,
            birthDate=birthDate,
            customBooleanFields=customBooleanFields,
            customDateFields=customDateFields,
            customDropDownFields=customDropDownFields,
            customNumberFields=customNumberFields,
            customTextFields=customTextFields,
            departmentPosition=departmentPosition,
            disabilityDescription=disabilityDescription,
            employeeId=employeeId,
            ethnicity=ethnicity,
            federalTax=federalTax,
            firstName=firstName,
            fitwExemptReason=fitwExemptReason,
            futaExemptReason=futaExemptReason,
            gender=gender,
            homeAddress=homeAddress,
            isEmployee943=isEmployee943,
            isSmoker=isSmoker,
            lastName=lastName,
            localTax=localTax,
            mainDirectDeposit=mainDirectDeposit,
            maritalStatus=maritalStatus,
            medExemptReason=medExemptReason,
            middleName=middleName,
            nonPrimaryStateTax=nonPrimaryStateTax,
            preferredName=preferredName,
            primaryPayRate=primaryPayRate,
            primaryStateTax=primaryStateTax,
            priorLastName=priorLastName,
            salutation=salutation,
            sitwExemptReason=sitwExemptReason,
            ssExemptReason=ssExemptReason,
            ssn=ssn,
            status=status,
            suffix=suffix,
            suiExemptReason=suiExemptReason,
            suiState=suiState,
            taxDistributionCode1099R=taxDistributionCode1099R,
            taxForm=taxForm,
            veteranDescription=veteranDescription,
            webTime=webTime,
            workAddress=workAddress,
            workEligibility=workEligibility,
            _configuration=_configuration,
            **kwargs,
        )

from paylocity_python_sdk.model.staged_employee_additional_direct_deposit import StagedEmployeeAdditionalDirectDeposit
from paylocity_python_sdk.model.staged_employee_benefit_setup import StagedEmployeeBenefitSetup
from paylocity_python_sdk.model.staged_employee_custom_boolean_fields import StagedEmployeeCustomBooleanFields
from paylocity_python_sdk.model.staged_employee_custom_date_fields import StagedEmployeeCustomDateFields
from paylocity_python_sdk.model.staged_employee_custom_drop_down_fields import StagedEmployeeCustomDropDownFields
from paylocity_python_sdk.model.staged_employee_custom_number_fields import StagedEmployeeCustomNumberFields
from paylocity_python_sdk.model.staged_employee_custom_text_fields import StagedEmployeeCustomTextFields
from paylocity_python_sdk.model.staged_employee_department_position import StagedEmployeeDepartmentPosition
from paylocity_python_sdk.model.staged_employee_federal_tax import StagedEmployeeFederalTax
from paylocity_python_sdk.model.staged_employee_home_address import StagedEmployeeHomeAddress
from paylocity_python_sdk.model.staged_employee_local_tax import StagedEmployeeLocalTax
from paylocity_python_sdk.model.staged_employee_main_direct_deposit import StagedEmployeeMainDirectDeposit
from paylocity_python_sdk.model.staged_employee_non_primary_state_tax import StagedEmployeeNonPrimaryStateTax
from paylocity_python_sdk.model.staged_employee_primary_pay_rate import StagedEmployeePrimaryPayRate
from paylocity_python_sdk.model.staged_employee_primary_state_tax import StagedEmployeePrimaryStateTax
from paylocity_python_sdk.model.staged_employee_status import StagedEmployeeStatus
from paylocity_python_sdk.model.staged_employee_work_address import StagedEmployeeWorkAddress
from paylocity_python_sdk.model.staged_employee_work_eligibility import StagedEmployeeWorkEligibility
