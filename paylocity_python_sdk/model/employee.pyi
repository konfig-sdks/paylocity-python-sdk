# coding: utf-8

"""
    WebLink API

    For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

    The version of the OpenAPI document: v2
    Contact: webservices@paylocity.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paylocity_python_sdk import schemas  # noqa: F401


class Employee(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The employee model
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def additionalDirectDeposit() -> typing.Type['EmployeeAdditionalDirectDeposit']:
                return EmployeeAdditionalDirectDeposit
        
            @staticmethod
            def additionalRate() -> typing.Type['EmployeeAdditionalRate']:
                return EmployeeAdditionalRate
            benefitSetup = schemas.DictSchema
            birthDate = schemas.DictSchema
            companyFEIN = schemas.DictSchema
            companyName = schemas.DictSchema
            currency = schemas.DictSchema
        
            @staticmethod
            def customBooleanFields() -> typing.Type['EmployeeCustomBooleanFields']:
                return EmployeeCustomBooleanFields
        
            @staticmethod
            def customDateFields() -> typing.Type['EmployeeCustomDateFields']:
                return EmployeeCustomDateFields
        
            @staticmethod
            def customDropDownFields() -> typing.Type['EmployeeCustomDropDownFields']:
                return EmployeeCustomDropDownFields
        
            @staticmethod
            def customNumberFields() -> typing.Type['EmployeeCustomNumberFields']:
                return EmployeeCustomNumberFields
        
            @staticmethod
            def customTextFields() -> typing.Type['EmployeeCustomTextFields']:
                return EmployeeCustomTextFields
            departmentPosition = schemas.DictSchema
            disabilityDescription = schemas.DictSchema
        
            @staticmethod
            def emergencyContacts() -> typing.Type['EmployeeEmergencyContacts']:
                return EmployeeEmergencyContacts
            employeeId = schemas.DictSchema
            ethnicity = schemas.DictSchema
            federalTax = schemas.DictSchema
            firstName = schemas.DictSchema
            gender = schemas.DictSchema
            homeAddress = schemas.DictSchema
            isHighlyCompensated = schemas.BoolSchema
            isSmoker = schemas.BoolSchema
            lastName = schemas.DictSchema
        
            @staticmethod
            def localTax() -> typing.Type['EmployeeLocalTax']:
                return EmployeeLocalTax
            mainDirectDeposit = schemas.DictSchema
            maritalStatus = schemas.DictSchema
            middleName = schemas.DictSchema
            nonPrimaryStateTax = schemas.DictSchema
            ownerPercent = schemas.DictSchema
            preferredName = schemas.DictSchema
            primaryPayRate = schemas.DictSchema
            primaryStateTax = schemas.DictSchema
            priorLastName = schemas.DictSchema
            salutation = schemas.DictSchema
            ssn = schemas.DictSchema
            status = schemas.DictSchema
            suffix = schemas.DictSchema
            taxSetup = schemas.DictSchema
            veteranDescription = schemas.DictSchema
            webTime = schemas.DictSchema
            workAddress = schemas.DictSchema
            workEligibility = schemas.DictSchema
            __annotations__ = {
                "additionalDirectDeposit": additionalDirectDeposit,
                "additionalRate": additionalRate,
                "benefitSetup": benefitSetup,
                "birthDate": birthDate,
                "companyFEIN": companyFEIN,
                "companyName": companyName,
                "currency": currency,
                "customBooleanFields": customBooleanFields,
                "customDateFields": customDateFields,
                "customDropDownFields": customDropDownFields,
                "customNumberFields": customNumberFields,
                "customTextFields": customTextFields,
                "departmentPosition": departmentPosition,
                "disabilityDescription": disabilityDescription,
                "emergencyContacts": emergencyContacts,
                "employeeId": employeeId,
                "ethnicity": ethnicity,
                "federalTax": federalTax,
                "firstName": firstName,
                "gender": gender,
                "homeAddress": homeAddress,
                "isHighlyCompensated": isHighlyCompensated,
                "isSmoker": isSmoker,
                "lastName": lastName,
                "localTax": localTax,
                "mainDirectDeposit": mainDirectDeposit,
                "maritalStatus": maritalStatus,
                "middleName": middleName,
                "nonPrimaryStateTax": nonPrimaryStateTax,
                "ownerPercent": ownerPercent,
                "preferredName": preferredName,
                "primaryPayRate": primaryPayRate,
                "primaryStateTax": primaryStateTax,
                "priorLastName": priorLastName,
                "salutation": salutation,
                "ssn": ssn,
                "status": status,
                "suffix": suffix,
                "taxSetup": taxSetup,
                "veteranDescription": veteranDescription,
                "webTime": webTime,
                "workAddress": workAddress,
                "workEligibility": workEligibility,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalDirectDeposit"]) -> 'EmployeeAdditionalDirectDeposit': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalRate"]) -> 'EmployeeAdditionalRate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitSetup"]) -> MetaOapg.properties.benefitSetup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["birthDate"]) -> MetaOapg.properties.birthDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyFEIN"]) -> MetaOapg.properties.companyFEIN: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyName"]) -> MetaOapg.properties.companyName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customBooleanFields"]) -> 'EmployeeCustomBooleanFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customDateFields"]) -> 'EmployeeCustomDateFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customDropDownFields"]) -> 'EmployeeCustomDropDownFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customNumberFields"]) -> 'EmployeeCustomNumberFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customTextFields"]) -> 'EmployeeCustomTextFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departmentPosition"]) -> MetaOapg.properties.departmentPosition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disabilityDescription"]) -> MetaOapg.properties.disabilityDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emergencyContacts"]) -> 'EmployeeEmergencyContacts': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ethnicity"]) -> MetaOapg.properties.ethnicity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["federalTax"]) -> MetaOapg.properties.federalTax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["homeAddress"]) -> MetaOapg.properties.homeAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isHighlyCompensated"]) -> MetaOapg.properties.isHighlyCompensated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSmoker"]) -> MetaOapg.properties.isSmoker: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["localTax"]) -> 'EmployeeLocalTax': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mainDirectDeposit"]) -> MetaOapg.properties.mainDirectDeposit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maritalStatus"]) -> MetaOapg.properties.maritalStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["middleName"]) -> MetaOapg.properties.middleName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nonPrimaryStateTax"]) -> MetaOapg.properties.nonPrimaryStateTax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ownerPercent"]) -> MetaOapg.properties.ownerPercent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferredName"]) -> MetaOapg.properties.preferredName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryPayRate"]) -> MetaOapg.properties.primaryPayRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryStateTax"]) -> MetaOapg.properties.primaryStateTax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priorLastName"]) -> MetaOapg.properties.priorLastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salutation"]) -> MetaOapg.properties.salutation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssn"]) -> MetaOapg.properties.ssn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suffix"]) -> MetaOapg.properties.suffix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxSetup"]) -> MetaOapg.properties.taxSetup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["veteranDescription"]) -> MetaOapg.properties.veteranDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webTime"]) -> MetaOapg.properties.webTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workAddress"]) -> MetaOapg.properties.workAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workEligibility"]) -> MetaOapg.properties.workEligibility: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["additionalDirectDeposit", "additionalRate", "benefitSetup", "birthDate", "companyFEIN", "companyName", "currency", "customBooleanFields", "customDateFields", "customDropDownFields", "customNumberFields", "customTextFields", "departmentPosition", "disabilityDescription", "emergencyContacts", "employeeId", "ethnicity", "federalTax", "firstName", "gender", "homeAddress", "isHighlyCompensated", "isSmoker", "lastName", "localTax", "mainDirectDeposit", "maritalStatus", "middleName", "nonPrimaryStateTax", "ownerPercent", "preferredName", "primaryPayRate", "primaryStateTax", "priorLastName", "salutation", "ssn", "status", "suffix", "taxSetup", "veteranDescription", "webTime", "workAddress", "workEligibility", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalDirectDeposit"]) -> typing.Union['EmployeeAdditionalDirectDeposit', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalRate"]) -> typing.Union['EmployeeAdditionalRate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitSetup"]) -> typing.Union[MetaOapg.properties.benefitSetup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["birthDate"]) -> typing.Union[MetaOapg.properties.birthDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyFEIN"]) -> typing.Union[MetaOapg.properties.companyFEIN, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyName"]) -> typing.Union[MetaOapg.properties.companyName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customBooleanFields"]) -> typing.Union['EmployeeCustomBooleanFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customDateFields"]) -> typing.Union['EmployeeCustomDateFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customDropDownFields"]) -> typing.Union['EmployeeCustomDropDownFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customNumberFields"]) -> typing.Union['EmployeeCustomNumberFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customTextFields"]) -> typing.Union['EmployeeCustomTextFields', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departmentPosition"]) -> typing.Union[MetaOapg.properties.departmentPosition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disabilityDescription"]) -> typing.Union[MetaOapg.properties.disabilityDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emergencyContacts"]) -> typing.Union['EmployeeEmergencyContacts', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ethnicity"]) -> typing.Union[MetaOapg.properties.ethnicity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["federalTax"]) -> typing.Union[MetaOapg.properties.federalTax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union[MetaOapg.properties.gender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["homeAddress"]) -> typing.Union[MetaOapg.properties.homeAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isHighlyCompensated"]) -> typing.Union[MetaOapg.properties.isHighlyCompensated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSmoker"]) -> typing.Union[MetaOapg.properties.isSmoker, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["localTax"]) -> typing.Union['EmployeeLocalTax', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mainDirectDeposit"]) -> typing.Union[MetaOapg.properties.mainDirectDeposit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maritalStatus"]) -> typing.Union[MetaOapg.properties.maritalStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["middleName"]) -> typing.Union[MetaOapg.properties.middleName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nonPrimaryStateTax"]) -> typing.Union[MetaOapg.properties.nonPrimaryStateTax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ownerPercent"]) -> typing.Union[MetaOapg.properties.ownerPercent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferredName"]) -> typing.Union[MetaOapg.properties.preferredName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryPayRate"]) -> typing.Union[MetaOapg.properties.primaryPayRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryStateTax"]) -> typing.Union[MetaOapg.properties.primaryStateTax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priorLastName"]) -> typing.Union[MetaOapg.properties.priorLastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salutation"]) -> typing.Union[MetaOapg.properties.salutation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssn"]) -> typing.Union[MetaOapg.properties.ssn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suffix"]) -> typing.Union[MetaOapg.properties.suffix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxSetup"]) -> typing.Union[MetaOapg.properties.taxSetup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["veteranDescription"]) -> typing.Union[MetaOapg.properties.veteranDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webTime"]) -> typing.Union[MetaOapg.properties.webTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workAddress"]) -> typing.Union[MetaOapg.properties.workAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workEligibility"]) -> typing.Union[MetaOapg.properties.workEligibility, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["additionalDirectDeposit", "additionalRate", "benefitSetup", "birthDate", "companyFEIN", "companyName", "currency", "customBooleanFields", "customDateFields", "customDropDownFields", "customNumberFields", "customTextFields", "departmentPosition", "disabilityDescription", "emergencyContacts", "employeeId", "ethnicity", "federalTax", "firstName", "gender", "homeAddress", "isHighlyCompensated", "isSmoker", "lastName", "localTax", "mainDirectDeposit", "maritalStatus", "middleName", "nonPrimaryStateTax", "ownerPercent", "preferredName", "primaryPayRate", "primaryStateTax", "priorLastName", "salutation", "ssn", "status", "suffix", "taxSetup", "veteranDescription", "webTime", "workAddress", "workEligibility", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        additionalDirectDeposit: typing.Union['EmployeeAdditionalDirectDeposit', schemas.Unset] = schemas.unset,
        additionalRate: typing.Union['EmployeeAdditionalRate', schemas.Unset] = schemas.unset,
        benefitSetup: typing.Union[MetaOapg.properties.benefitSetup, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        birthDate: typing.Union[MetaOapg.properties.birthDate, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        companyFEIN: typing.Union[MetaOapg.properties.companyFEIN, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        companyName: typing.Union[MetaOapg.properties.companyName, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        customBooleanFields: typing.Union['EmployeeCustomBooleanFields', schemas.Unset] = schemas.unset,
        customDateFields: typing.Union['EmployeeCustomDateFields', schemas.Unset] = schemas.unset,
        customDropDownFields: typing.Union['EmployeeCustomDropDownFields', schemas.Unset] = schemas.unset,
        customNumberFields: typing.Union['EmployeeCustomNumberFields', schemas.Unset] = schemas.unset,
        customTextFields: typing.Union['EmployeeCustomTextFields', schemas.Unset] = schemas.unset,
        departmentPosition: typing.Union[MetaOapg.properties.departmentPosition, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        disabilityDescription: typing.Union[MetaOapg.properties.disabilityDescription, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        emergencyContacts: typing.Union['EmployeeEmergencyContacts', schemas.Unset] = schemas.unset,
        employeeId: typing.Union[MetaOapg.properties.employeeId, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        ethnicity: typing.Union[MetaOapg.properties.ethnicity, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        federalTax: typing.Union[MetaOapg.properties.federalTax, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        firstName: typing.Union[MetaOapg.properties.firstName, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        gender: typing.Union[MetaOapg.properties.gender, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        homeAddress: typing.Union[MetaOapg.properties.homeAddress, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        isHighlyCompensated: typing.Union[MetaOapg.properties.isHighlyCompensated, bool, schemas.Unset] = schemas.unset,
        isSmoker: typing.Union[MetaOapg.properties.isSmoker, bool, schemas.Unset] = schemas.unset,
        lastName: typing.Union[MetaOapg.properties.lastName, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        localTax: typing.Union['EmployeeLocalTax', schemas.Unset] = schemas.unset,
        mainDirectDeposit: typing.Union[MetaOapg.properties.mainDirectDeposit, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        maritalStatus: typing.Union[MetaOapg.properties.maritalStatus, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        middleName: typing.Union[MetaOapg.properties.middleName, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        nonPrimaryStateTax: typing.Union[MetaOapg.properties.nonPrimaryStateTax, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        ownerPercent: typing.Union[MetaOapg.properties.ownerPercent, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        preferredName: typing.Union[MetaOapg.properties.preferredName, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        primaryPayRate: typing.Union[MetaOapg.properties.primaryPayRate, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        primaryStateTax: typing.Union[MetaOapg.properties.primaryStateTax, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        priorLastName: typing.Union[MetaOapg.properties.priorLastName, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        salutation: typing.Union[MetaOapg.properties.salutation, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        ssn: typing.Union[MetaOapg.properties.ssn, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        suffix: typing.Union[MetaOapg.properties.suffix, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        taxSetup: typing.Union[MetaOapg.properties.taxSetup, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        veteranDescription: typing.Union[MetaOapg.properties.veteranDescription, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        webTime: typing.Union[MetaOapg.properties.webTime, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        workAddress: typing.Union[MetaOapg.properties.workAddress, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        workEligibility: typing.Union[MetaOapg.properties.workEligibility, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Employee':
        return super().__new__(
            cls,
            *args,
            additionalDirectDeposit=additionalDirectDeposit,
            additionalRate=additionalRate,
            benefitSetup=benefitSetup,
            birthDate=birthDate,
            companyFEIN=companyFEIN,
            companyName=companyName,
            currency=currency,
            customBooleanFields=customBooleanFields,
            customDateFields=customDateFields,
            customDropDownFields=customDropDownFields,
            customNumberFields=customNumberFields,
            customTextFields=customTextFields,
            departmentPosition=departmentPosition,
            disabilityDescription=disabilityDescription,
            emergencyContacts=emergencyContacts,
            employeeId=employeeId,
            ethnicity=ethnicity,
            federalTax=federalTax,
            firstName=firstName,
            gender=gender,
            homeAddress=homeAddress,
            isHighlyCompensated=isHighlyCompensated,
            isSmoker=isSmoker,
            lastName=lastName,
            localTax=localTax,
            mainDirectDeposit=mainDirectDeposit,
            maritalStatus=maritalStatus,
            middleName=middleName,
            nonPrimaryStateTax=nonPrimaryStateTax,
            ownerPercent=ownerPercent,
            preferredName=preferredName,
            primaryPayRate=primaryPayRate,
            primaryStateTax=primaryStateTax,
            priorLastName=priorLastName,
            salutation=salutation,
            ssn=ssn,
            status=status,
            suffix=suffix,
            taxSetup=taxSetup,
            veteranDescription=veteranDescription,
            webTime=webTime,
            workAddress=workAddress,
            workEligibility=workEligibility,
            _configuration=_configuration,
            **kwargs,
        )

from paylocity_python_sdk.model.employee_additional_direct_deposit import EmployeeAdditionalDirectDeposit
from paylocity_python_sdk.model.employee_additional_rate import EmployeeAdditionalRate
from paylocity_python_sdk.model.employee_custom_boolean_fields import EmployeeCustomBooleanFields
from paylocity_python_sdk.model.employee_custom_date_fields import EmployeeCustomDateFields
from paylocity_python_sdk.model.employee_custom_drop_down_fields import EmployeeCustomDropDownFields
from paylocity_python_sdk.model.employee_custom_number_fields import EmployeeCustomNumberFields
from paylocity_python_sdk.model.employee_custom_text_fields import EmployeeCustomTextFields
from paylocity_python_sdk.model.employee_emergency_contacts import EmployeeEmergencyContacts
from paylocity_python_sdk.model.employee_local_tax import EmployeeLocalTax
