# coding: utf-8

"""
    WebLink API

    For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

    The version of the OpenAPI document: v2
    Contact: webservices@paylocity.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paylocity_python_sdk import schemas  # noqa: F401


class EmployeeV1(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Employee
    """


    class MetaOapg:
        
        class properties:
            address1 = schemas.StrSchema
            address2 = schemas.StrSchema
        
            @staticmethod
            def benefitSetup() -> typing.Type['EmployeeV1BenefitSetup']:
                return EmployeeV1BenefitSetup
            birthDate = schemas.StrSchema
            city = schemas.StrSchema
            companyNumber = schemas.StrSchema
        
            @staticmethod
            def departmentPosition() -> typing.Type['EmployeeV1DepartmentPosition']:
                return EmployeeV1DepartmentPosition
            employeeId = schemas.StrSchema
        
            @staticmethod
            def employeeStatus() -> typing.Type['EmployeeV1EmployeeStatus']:
                return EmployeeV1EmployeeStatus
            ethnicity = schemas.StrSchema
            firstName = schemas.StrSchema
            gender = schemas.StrSchema
            highlyCompensatedEmployee = schemas.BoolSchema
            hireDate = schemas.StrSchema
            homePhone = schemas.StrSchema
            lastName = schemas.StrSchema
            maritalStatus = schemas.StrSchema
            middleName = schemas.StrSchema
            nickname = schemas.StrSchema
            ownerPercent = schemas.NumberSchema
            personalEmailAddress = schemas.StrSchema
            personalMobilePhone = schemas.StrSchema
            position = schemas.StrSchema
            postalCode = schemas.StrSchema
        
            @staticmethod
            def primaryPayRate() -> typing.Type['EmployeeV1PrimaryPayRate']:
                return EmployeeV1PrimaryPayRate
            reHireDate = schemas.StrSchema
            ssn = schemas.StrSchema
            state = schemas.StrSchema
            statutory = schemas.BoolSchema
            supervisorCompanyNumber = schemas.StrSchema
            supervisorEmployeeId = schemas.StrSchema
            taxForm = schemas.StrSchema
            terminationDate = schemas.StrSchema
            terminationReason = schemas.StrSchema
            workEmailAddress = schemas.StrSchema
            workPhone = schemas.StrSchema
            workPhoneExt = schemas.StrSchema
            __annotations__ = {
                "address1": address1,
                "address2": address2,
                "benefitSetup": benefitSetup,
                "birthDate": birthDate,
                "city": city,
                "companyNumber": companyNumber,
                "departmentPosition": departmentPosition,
                "employeeId": employeeId,
                "employeeStatus": employeeStatus,
                "ethnicity": ethnicity,
                "firstName": firstName,
                "gender": gender,
                "highlyCompensatedEmployee": highlyCompensatedEmployee,
                "hireDate": hireDate,
                "homePhone": homePhone,
                "lastName": lastName,
                "maritalStatus": maritalStatus,
                "middleName": middleName,
                "nickname": nickname,
                "ownerPercent": ownerPercent,
                "personalEmailAddress": personalEmailAddress,
                "personalMobilePhone": personalMobilePhone,
                "position": position,
                "postalCode": postalCode,
                "primaryPayRate": primaryPayRate,
                "reHireDate": reHireDate,
                "ssn": ssn,
                "state": state,
                "statutory": statutory,
                "supervisorCompanyNumber": supervisorCompanyNumber,
                "supervisorEmployeeId": supervisorEmployeeId,
                "taxForm": taxForm,
                "terminationDate": terminationDate,
                "terminationReason": terminationReason,
                "workEmailAddress": workEmailAddress,
                "workPhone": workPhone,
                "workPhoneExt": workPhoneExt,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address1"]) -> MetaOapg.properties.address1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address2"]) -> MetaOapg.properties.address2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitSetup"]) -> 'EmployeeV1BenefitSetup': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["birthDate"]) -> MetaOapg.properties.birthDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyNumber"]) -> MetaOapg.properties.companyNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departmentPosition"]) -> 'EmployeeV1DepartmentPosition': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeStatus"]) -> 'EmployeeV1EmployeeStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ethnicity"]) -> MetaOapg.properties.ethnicity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["highlyCompensatedEmployee"]) -> MetaOapg.properties.highlyCompensatedEmployee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hireDate"]) -> MetaOapg.properties.hireDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["homePhone"]) -> MetaOapg.properties.homePhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maritalStatus"]) -> MetaOapg.properties.maritalStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["middleName"]) -> MetaOapg.properties.middleName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nickname"]) -> MetaOapg.properties.nickname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ownerPercent"]) -> MetaOapg.properties.ownerPercent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personalEmailAddress"]) -> MetaOapg.properties.personalEmailAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personalMobilePhone"]) -> MetaOapg.properties.personalMobilePhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["position"]) -> MetaOapg.properties.position: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postalCode"]) -> MetaOapg.properties.postalCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryPayRate"]) -> 'EmployeeV1PrimaryPayRate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reHireDate"]) -> MetaOapg.properties.reHireDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssn"]) -> MetaOapg.properties.ssn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statutory"]) -> MetaOapg.properties.statutory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisorCompanyNumber"]) -> MetaOapg.properties.supervisorCompanyNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisorEmployeeId"]) -> MetaOapg.properties.supervisorEmployeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxForm"]) -> MetaOapg.properties.taxForm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terminationDate"]) -> MetaOapg.properties.terminationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terminationReason"]) -> MetaOapg.properties.terminationReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workEmailAddress"]) -> MetaOapg.properties.workEmailAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workPhone"]) -> MetaOapg.properties.workPhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workPhoneExt"]) -> MetaOapg.properties.workPhoneExt: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["address1", "address2", "benefitSetup", "birthDate", "city", "companyNumber", "departmentPosition", "employeeId", "employeeStatus", "ethnicity", "firstName", "gender", "highlyCompensatedEmployee", "hireDate", "homePhone", "lastName", "maritalStatus", "middleName", "nickname", "ownerPercent", "personalEmailAddress", "personalMobilePhone", "position", "postalCode", "primaryPayRate", "reHireDate", "ssn", "state", "statutory", "supervisorCompanyNumber", "supervisorEmployeeId", "taxForm", "terminationDate", "terminationReason", "workEmailAddress", "workPhone", "workPhoneExt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address1"]) -> typing.Union[MetaOapg.properties.address1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address2"]) -> typing.Union[MetaOapg.properties.address2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitSetup"]) -> typing.Union['EmployeeV1BenefitSetup', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["birthDate"]) -> typing.Union[MetaOapg.properties.birthDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyNumber"]) -> typing.Union[MetaOapg.properties.companyNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departmentPosition"]) -> typing.Union['EmployeeV1DepartmentPosition', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeStatus"]) -> typing.Union['EmployeeV1EmployeeStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ethnicity"]) -> typing.Union[MetaOapg.properties.ethnicity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union[MetaOapg.properties.gender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["highlyCompensatedEmployee"]) -> typing.Union[MetaOapg.properties.highlyCompensatedEmployee, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hireDate"]) -> typing.Union[MetaOapg.properties.hireDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["homePhone"]) -> typing.Union[MetaOapg.properties.homePhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maritalStatus"]) -> typing.Union[MetaOapg.properties.maritalStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["middleName"]) -> typing.Union[MetaOapg.properties.middleName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nickname"]) -> typing.Union[MetaOapg.properties.nickname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ownerPercent"]) -> typing.Union[MetaOapg.properties.ownerPercent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personalEmailAddress"]) -> typing.Union[MetaOapg.properties.personalEmailAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personalMobilePhone"]) -> typing.Union[MetaOapg.properties.personalMobilePhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["position"]) -> typing.Union[MetaOapg.properties.position, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postalCode"]) -> typing.Union[MetaOapg.properties.postalCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryPayRate"]) -> typing.Union['EmployeeV1PrimaryPayRate', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reHireDate"]) -> typing.Union[MetaOapg.properties.reHireDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssn"]) -> typing.Union[MetaOapg.properties.ssn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statutory"]) -> typing.Union[MetaOapg.properties.statutory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisorCompanyNumber"]) -> typing.Union[MetaOapg.properties.supervisorCompanyNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisorEmployeeId"]) -> typing.Union[MetaOapg.properties.supervisorEmployeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxForm"]) -> typing.Union[MetaOapg.properties.taxForm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terminationDate"]) -> typing.Union[MetaOapg.properties.terminationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terminationReason"]) -> typing.Union[MetaOapg.properties.terminationReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workEmailAddress"]) -> typing.Union[MetaOapg.properties.workEmailAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workPhone"]) -> typing.Union[MetaOapg.properties.workPhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workPhoneExt"]) -> typing.Union[MetaOapg.properties.workPhoneExt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["address1", "address2", "benefitSetup", "birthDate", "city", "companyNumber", "departmentPosition", "employeeId", "employeeStatus", "ethnicity", "firstName", "gender", "highlyCompensatedEmployee", "hireDate", "homePhone", "lastName", "maritalStatus", "middleName", "nickname", "ownerPercent", "personalEmailAddress", "personalMobilePhone", "position", "postalCode", "primaryPayRate", "reHireDate", "ssn", "state", "statutory", "supervisorCompanyNumber", "supervisorEmployeeId", "taxForm", "terminationDate", "terminationReason", "workEmailAddress", "workPhone", "workPhoneExt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        address1: typing.Union[MetaOapg.properties.address1, str, schemas.Unset] = schemas.unset,
        address2: typing.Union[MetaOapg.properties.address2, str, schemas.Unset] = schemas.unset,
        benefitSetup: typing.Union['EmployeeV1BenefitSetup', schemas.Unset] = schemas.unset,
        birthDate: typing.Union[MetaOapg.properties.birthDate, str, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        companyNumber: typing.Union[MetaOapg.properties.companyNumber, str, schemas.Unset] = schemas.unset,
        departmentPosition: typing.Union['EmployeeV1DepartmentPosition', schemas.Unset] = schemas.unset,
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        employeeStatus: typing.Union['EmployeeV1EmployeeStatus', schemas.Unset] = schemas.unset,
        ethnicity: typing.Union[MetaOapg.properties.ethnicity, str, schemas.Unset] = schemas.unset,
        firstName: typing.Union[MetaOapg.properties.firstName, str, schemas.Unset] = schemas.unset,
        gender: typing.Union[MetaOapg.properties.gender, str, schemas.Unset] = schemas.unset,
        highlyCompensatedEmployee: typing.Union[MetaOapg.properties.highlyCompensatedEmployee, bool, schemas.Unset] = schemas.unset,
        hireDate: typing.Union[MetaOapg.properties.hireDate, str, schemas.Unset] = schemas.unset,
        homePhone: typing.Union[MetaOapg.properties.homePhone, str, schemas.Unset] = schemas.unset,
        lastName: typing.Union[MetaOapg.properties.lastName, str, schemas.Unset] = schemas.unset,
        maritalStatus: typing.Union[MetaOapg.properties.maritalStatus, str, schemas.Unset] = schemas.unset,
        middleName: typing.Union[MetaOapg.properties.middleName, str, schemas.Unset] = schemas.unset,
        nickname: typing.Union[MetaOapg.properties.nickname, str, schemas.Unset] = schemas.unset,
        ownerPercent: typing.Union[MetaOapg.properties.ownerPercent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        personalEmailAddress: typing.Union[MetaOapg.properties.personalEmailAddress, str, schemas.Unset] = schemas.unset,
        personalMobilePhone: typing.Union[MetaOapg.properties.personalMobilePhone, str, schemas.Unset] = schemas.unset,
        position: typing.Union[MetaOapg.properties.position, str, schemas.Unset] = schemas.unset,
        postalCode: typing.Union[MetaOapg.properties.postalCode, str, schemas.Unset] = schemas.unset,
        primaryPayRate: typing.Union['EmployeeV1PrimaryPayRate', schemas.Unset] = schemas.unset,
        reHireDate: typing.Union[MetaOapg.properties.reHireDate, str, schemas.Unset] = schemas.unset,
        ssn: typing.Union[MetaOapg.properties.ssn, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        statutory: typing.Union[MetaOapg.properties.statutory, bool, schemas.Unset] = schemas.unset,
        supervisorCompanyNumber: typing.Union[MetaOapg.properties.supervisorCompanyNumber, str, schemas.Unset] = schemas.unset,
        supervisorEmployeeId: typing.Union[MetaOapg.properties.supervisorEmployeeId, str, schemas.Unset] = schemas.unset,
        taxForm: typing.Union[MetaOapg.properties.taxForm, str, schemas.Unset] = schemas.unset,
        terminationDate: typing.Union[MetaOapg.properties.terminationDate, str, schemas.Unset] = schemas.unset,
        terminationReason: typing.Union[MetaOapg.properties.terminationReason, str, schemas.Unset] = schemas.unset,
        workEmailAddress: typing.Union[MetaOapg.properties.workEmailAddress, str, schemas.Unset] = schemas.unset,
        workPhone: typing.Union[MetaOapg.properties.workPhone, str, schemas.Unset] = schemas.unset,
        workPhoneExt: typing.Union[MetaOapg.properties.workPhoneExt, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmployeeV1':
        return super().__new__(
            cls,
            *args,
            address1=address1,
            address2=address2,
            benefitSetup=benefitSetup,
            birthDate=birthDate,
            city=city,
            companyNumber=companyNumber,
            departmentPosition=departmentPosition,
            employeeId=employeeId,
            employeeStatus=employeeStatus,
            ethnicity=ethnicity,
            firstName=firstName,
            gender=gender,
            highlyCompensatedEmployee=highlyCompensatedEmployee,
            hireDate=hireDate,
            homePhone=homePhone,
            lastName=lastName,
            maritalStatus=maritalStatus,
            middleName=middleName,
            nickname=nickname,
            ownerPercent=ownerPercent,
            personalEmailAddress=personalEmailAddress,
            personalMobilePhone=personalMobilePhone,
            position=position,
            postalCode=postalCode,
            primaryPayRate=primaryPayRate,
            reHireDate=reHireDate,
            ssn=ssn,
            state=state,
            statutory=statutory,
            supervisorCompanyNumber=supervisorCompanyNumber,
            supervisorEmployeeId=supervisorEmployeeId,
            taxForm=taxForm,
            terminationDate=terminationDate,
            terminationReason=terminationReason,
            workEmailAddress=workEmailAddress,
            workPhone=workPhone,
            workPhoneExt=workPhoneExt,
            _configuration=_configuration,
            **kwargs,
        )

from paylocity_python_sdk.model.employee_v1_benefit_setup import EmployeeV1BenefitSetup
from paylocity_python_sdk.model.employee_v1_department_position import EmployeeV1DepartmentPosition
from paylocity_python_sdk.model.employee_v1_employee_status import EmployeeV1EmployeeStatus
from paylocity_python_sdk.model.employee_v1_primary_pay_rate import EmployeeV1PrimaryPayRate
