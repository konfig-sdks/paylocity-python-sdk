# coding: utf-8

"""
    WebLink API

    For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

    The version of the OpenAPI document: v2
    Contact: webservices@paylocity.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paylocity_python_sdk import schemas  # noqa: F401


class StateTax(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The State Tax model
    """


    class MetaOapg:
        
        class properties:
            amount = schemas.DictSchema
            deductionsAmount = schemas.NumberSchema
            dependentsAmount = schemas.NumberSchema
            exemptions = schemas.DictSchema
            exemptions2 = schemas.DictSchema
            filingStatus = schemas.DictSchema
            higherRate = schemas.BoolSchema
            otherIncomeAmount = schemas.NumberSchema
            percentage = schemas.DictSchema
            specialCheckCalc = schemas.DictSchema
            taxCalculationCode = schemas.DictSchema
            taxCode = schemas.DictSchema
            w4FormYear = schemas.IntSchema
            __annotations__ = {
                "amount": amount,
                "deductionsAmount": deductionsAmount,
                "dependentsAmount": dependentsAmount,
                "exemptions": exemptions,
                "exemptions2": exemptions2,
                "filingStatus": filingStatus,
                "higherRate": higherRate,
                "otherIncomeAmount": otherIncomeAmount,
                "percentage": percentage,
                "specialCheckCalc": specialCheckCalc,
                "taxCalculationCode": taxCalculationCode,
                "taxCode": taxCode,
                "w4FormYear": w4FormYear,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductionsAmount"]) -> MetaOapg.properties.deductionsAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dependentsAmount"]) -> MetaOapg.properties.dependentsAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exemptions"]) -> MetaOapg.properties.exemptions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exemptions2"]) -> MetaOapg.properties.exemptions2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filingStatus"]) -> MetaOapg.properties.filingStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["higherRate"]) -> MetaOapg.properties.higherRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherIncomeAmount"]) -> MetaOapg.properties.otherIncomeAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["percentage"]) -> MetaOapg.properties.percentage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["specialCheckCalc"]) -> MetaOapg.properties.specialCheckCalc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxCalculationCode"]) -> MetaOapg.properties.taxCalculationCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxCode"]) -> MetaOapg.properties.taxCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["w4FormYear"]) -> MetaOapg.properties.w4FormYear: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount", "deductionsAmount", "dependentsAmount", "exemptions", "exemptions2", "filingStatus", "higherRate", "otherIncomeAmount", "percentage", "specialCheckCalc", "taxCalculationCode", "taxCode", "w4FormYear", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductionsAmount"]) -> typing.Union[MetaOapg.properties.deductionsAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dependentsAmount"]) -> typing.Union[MetaOapg.properties.dependentsAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exemptions"]) -> typing.Union[MetaOapg.properties.exemptions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exemptions2"]) -> typing.Union[MetaOapg.properties.exemptions2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filingStatus"]) -> typing.Union[MetaOapg.properties.filingStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["higherRate"]) -> typing.Union[MetaOapg.properties.higherRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherIncomeAmount"]) -> typing.Union[MetaOapg.properties.otherIncomeAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["percentage"]) -> typing.Union[MetaOapg.properties.percentage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["specialCheckCalc"]) -> typing.Union[MetaOapg.properties.specialCheckCalc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxCalculationCode"]) -> typing.Union[MetaOapg.properties.taxCalculationCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxCode"]) -> typing.Union[MetaOapg.properties.taxCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["w4FormYear"]) -> typing.Union[MetaOapg.properties.w4FormYear, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount", "deductionsAmount", "dependentsAmount", "exemptions", "exemptions2", "filingStatus", "higherRate", "otherIncomeAmount", "percentage", "specialCheckCalc", "taxCalculationCode", "taxCode", "w4FormYear", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        deductionsAmount: typing.Union[MetaOapg.properties.deductionsAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        dependentsAmount: typing.Union[MetaOapg.properties.dependentsAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        exemptions: typing.Union[MetaOapg.properties.exemptions, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        exemptions2: typing.Union[MetaOapg.properties.exemptions2, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        filingStatus: typing.Union[MetaOapg.properties.filingStatus, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        higherRate: typing.Union[MetaOapg.properties.higherRate, bool, schemas.Unset] = schemas.unset,
        otherIncomeAmount: typing.Union[MetaOapg.properties.otherIncomeAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        percentage: typing.Union[MetaOapg.properties.percentage, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        specialCheckCalc: typing.Union[MetaOapg.properties.specialCheckCalc, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        taxCalculationCode: typing.Union[MetaOapg.properties.taxCalculationCode, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        taxCode: typing.Union[MetaOapg.properties.taxCode, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        w4FormYear: typing.Union[MetaOapg.properties.w4FormYear, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StateTax':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            deductionsAmount=deductionsAmount,
            dependentsAmount=dependentsAmount,
            exemptions=exemptions,
            exemptions2=exemptions2,
            filingStatus=filingStatus,
            higherRate=higherRate,
            otherIncomeAmount=otherIncomeAmount,
            percentage=percentage,
            specialCheckCalc=specialCheckCalc,
            taxCalculationCode=taxCalculationCode,
            taxCode=taxCode,
            w4FormYear=w4FormYear,
            _configuration=_configuration,
            **kwargs,
        )
