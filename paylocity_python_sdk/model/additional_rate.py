# coding: utf-8

"""
    WebLink API

    For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

    The version of the OpenAPI document: v2
    Contact: webservices@paylocity.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paylocity_python_sdk import schemas  # noqa: F401


class AdditionalRate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The additional pay rate model
    """


    class MetaOapg:
        
        class properties:
            changeReason = schemas.DictSchema
            costCenter1 = schemas.DictSchema
            costCenter2 = schemas.DictSchema
            costCenter3 = schemas.DictSchema
            effectiveDate = schemas.DictSchema
            endCheckDate = schemas.DictSchema
            job = schemas.DictSchema
            rate = schemas.DictSchema
            rateCode = schemas.DictSchema
            rateNotes = schemas.DictSchema
            ratePer = schemas.DictSchema
            shift = schemas.DictSchema
            __annotations__ = {
                "changeReason": changeReason,
                "costCenter1": costCenter1,
                "costCenter2": costCenter2,
                "costCenter3": costCenter3,
                "effectiveDate": effectiveDate,
                "endCheckDate": endCheckDate,
                "job": job,
                "rate": rate,
                "rateCode": rateCode,
                "rateNotes": rateNotes,
                "ratePer": ratePer,
                "shift": shift,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changeReason"]) -> MetaOapg.properties.changeReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costCenter1"]) -> MetaOapg.properties.costCenter1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costCenter2"]) -> MetaOapg.properties.costCenter2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costCenter3"]) -> MetaOapg.properties.costCenter3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectiveDate"]) -> MetaOapg.properties.effectiveDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endCheckDate"]) -> MetaOapg.properties.endCheckDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["job"]) -> MetaOapg.properties.job: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rate"]) -> MetaOapg.properties.rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateCode"]) -> MetaOapg.properties.rateCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateNotes"]) -> MetaOapg.properties.rateNotes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratePer"]) -> MetaOapg.properties.ratePer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shift"]) -> MetaOapg.properties.shift: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["changeReason", "costCenter1", "costCenter2", "costCenter3", "effectiveDate", "endCheckDate", "job", "rate", "rateCode", "rateNotes", "ratePer", "shift", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changeReason"]) -> typing.Union[MetaOapg.properties.changeReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costCenter1"]) -> typing.Union[MetaOapg.properties.costCenter1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costCenter2"]) -> typing.Union[MetaOapg.properties.costCenter2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costCenter3"]) -> typing.Union[MetaOapg.properties.costCenter3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectiveDate"]) -> typing.Union[MetaOapg.properties.effectiveDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endCheckDate"]) -> typing.Union[MetaOapg.properties.endCheckDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["job"]) -> typing.Union[MetaOapg.properties.job, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rate"]) -> typing.Union[MetaOapg.properties.rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateCode"]) -> typing.Union[MetaOapg.properties.rateCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateNotes"]) -> typing.Union[MetaOapg.properties.rateNotes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratePer"]) -> typing.Union[MetaOapg.properties.ratePer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shift"]) -> typing.Union[MetaOapg.properties.shift, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["changeReason", "costCenter1", "costCenter2", "costCenter3", "effectiveDate", "endCheckDate", "job", "rate", "rateCode", "rateNotes", "ratePer", "shift", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        changeReason: typing.Union[MetaOapg.properties.changeReason, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        costCenter1: typing.Union[MetaOapg.properties.costCenter1, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        costCenter2: typing.Union[MetaOapg.properties.costCenter2, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        costCenter3: typing.Union[MetaOapg.properties.costCenter3, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        effectiveDate: typing.Union[MetaOapg.properties.effectiveDate, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        endCheckDate: typing.Union[MetaOapg.properties.endCheckDate, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        job: typing.Union[MetaOapg.properties.job, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        rate: typing.Union[MetaOapg.properties.rate, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        rateCode: typing.Union[MetaOapg.properties.rateCode, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        rateNotes: typing.Union[MetaOapg.properties.rateNotes, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        ratePer: typing.Union[MetaOapg.properties.ratePer, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        shift: typing.Union[MetaOapg.properties.shift, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AdditionalRate':
        return super().__new__(
            cls,
            *args,
            changeReason=changeReason,
            costCenter1=costCenter1,
            costCenter2=costCenter2,
            costCenter3=costCenter3,
            effectiveDate=effectiveDate,
            endCheckDate=endCheckDate,
            job=job,
            rate=rate,
            rateCode=rateCode,
            rateNotes=rateNotes,
            ratePer=ratePer,
            shift=shift,
            _configuration=_configuration,
            **kwargs,
        )
