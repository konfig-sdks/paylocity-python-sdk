# coding: utf-8

"""
    WebLink API

    For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

    The version of the OpenAPI document: v2
    Contact: webservices@paylocity.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paylocity_python_sdk import schemas  # noqa: F401


class PrimaryPayRate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            autoPay = schemas.BoolSchema
            baseRate = schemas.NumberSchema
            defaultHours = schemas.NumberSchema
            effectiveDate = schemas.DateSchema
            payFrequency = schemas.StrSchema
            payGrade = schemas.StrSchema
            payType = schemas.StrSchema
            ratePer = schemas.StrSchema
            reason = schemas.StrSchema
            salary = schemas.NumberSchema
            __annotations__ = {
                "autoPay": autoPay,
                "baseRate": baseRate,
                "defaultHours": defaultHours,
                "effectiveDate": effectiveDate,
                "payFrequency": payFrequency,
                "payGrade": payGrade,
                "payType": payType,
                "ratePer": ratePer,
                "reason": reason,
                "salary": salary,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["autoPay"]) -> MetaOapg.properties.autoPay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseRate"]) -> MetaOapg.properties.baseRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultHours"]) -> MetaOapg.properties.defaultHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectiveDate"]) -> MetaOapg.properties.effectiveDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payFrequency"]) -> MetaOapg.properties.payFrequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payGrade"]) -> MetaOapg.properties.payGrade: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payType"]) -> MetaOapg.properties.payType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratePer"]) -> MetaOapg.properties.ratePer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salary"]) -> MetaOapg.properties.salary: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["autoPay", "baseRate", "defaultHours", "effectiveDate", "payFrequency", "payGrade", "payType", "ratePer", "reason", "salary", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["autoPay"]) -> typing.Union[MetaOapg.properties.autoPay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseRate"]) -> typing.Union[MetaOapg.properties.baseRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultHours"]) -> typing.Union[MetaOapg.properties.defaultHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectiveDate"]) -> typing.Union[MetaOapg.properties.effectiveDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payFrequency"]) -> typing.Union[MetaOapg.properties.payFrequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payGrade"]) -> typing.Union[MetaOapg.properties.payGrade, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payType"]) -> typing.Union[MetaOapg.properties.payType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratePer"]) -> typing.Union[MetaOapg.properties.ratePer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salary"]) -> typing.Union[MetaOapg.properties.salary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["autoPay", "baseRate", "defaultHours", "effectiveDate", "payFrequency", "payGrade", "payType", "ratePer", "reason", "salary", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        autoPay: typing.Union[MetaOapg.properties.autoPay, bool, schemas.Unset] = schemas.unset,
        baseRate: typing.Union[MetaOapg.properties.baseRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        defaultHours: typing.Union[MetaOapg.properties.defaultHours, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        effectiveDate: typing.Union[MetaOapg.properties.effectiveDate, str, date, schemas.Unset] = schemas.unset,
        payFrequency: typing.Union[MetaOapg.properties.payFrequency, str, schemas.Unset] = schemas.unset,
        payGrade: typing.Union[MetaOapg.properties.payGrade, str, schemas.Unset] = schemas.unset,
        payType: typing.Union[MetaOapg.properties.payType, str, schemas.Unset] = schemas.unset,
        ratePer: typing.Union[MetaOapg.properties.ratePer, str, schemas.Unset] = schemas.unset,
        reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
        salary: typing.Union[MetaOapg.properties.salary, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PrimaryPayRate':
        return super().__new__(
            cls,
            *args,
            autoPay=autoPay,
            baseRate=baseRate,
            defaultHours=defaultHours,
            effectiveDate=effectiveDate,
            payFrequency=payFrequency,
            payGrade=payGrade,
            payType=payType,
            ratePer=ratePer,
            reason=reason,
            salary=salary,
            _configuration=_configuration,
            **kwargs,
        )
