# coding: utf-8

"""
    WebLink API

    For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

    The version of the OpenAPI document: v2
    Contact: webservices@paylocity.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paylocity_python_sdk import schemas  # noqa: F401


class LocalTax(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The Local Tax model
    """


    class MetaOapg:
        
        class properties:
            exemptions = schemas.DictSchema
            exemptions2 = schemas.DictSchema
            filingStatus = schemas.DictSchema
            residentPSD = schemas.DictSchema
            taxCode = schemas.DictSchema
            workPSD = schemas.DictSchema
            __annotations__ = {
                "exemptions": exemptions,
                "exemptions2": exemptions2,
                "filingStatus": filingStatus,
                "residentPSD": residentPSD,
                "taxCode": taxCode,
                "workPSD": workPSD,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exemptions"]) -> MetaOapg.properties.exemptions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exemptions2"]) -> MetaOapg.properties.exemptions2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filingStatus"]) -> MetaOapg.properties.filingStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["residentPSD"]) -> MetaOapg.properties.residentPSD: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxCode"]) -> MetaOapg.properties.taxCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workPSD"]) -> MetaOapg.properties.workPSD: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["exemptions", "exemptions2", "filingStatus", "residentPSD", "taxCode", "workPSD", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exemptions"]) -> typing.Union[MetaOapg.properties.exemptions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exemptions2"]) -> typing.Union[MetaOapg.properties.exemptions2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filingStatus"]) -> typing.Union[MetaOapg.properties.filingStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["residentPSD"]) -> typing.Union[MetaOapg.properties.residentPSD, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxCode"]) -> typing.Union[MetaOapg.properties.taxCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workPSD"]) -> typing.Union[MetaOapg.properties.workPSD, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["exemptions", "exemptions2", "filingStatus", "residentPSD", "taxCode", "workPSD", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        exemptions: typing.Union[MetaOapg.properties.exemptions, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        exemptions2: typing.Union[MetaOapg.properties.exemptions2, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        filingStatus: typing.Union[MetaOapg.properties.filingStatus, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        residentPSD: typing.Union[MetaOapg.properties.residentPSD, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        taxCode: typing.Union[MetaOapg.properties.taxCode, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        workPSD: typing.Union[MetaOapg.properties.workPSD, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LocalTax':
        return super().__new__(
            cls,
            *args,
            exemptions=exemptions,
            exemptions2=exemptions2,
            filingStatus=filingStatus,
            residentPSD=residentPSD,
            taxCode=taxCode,
            workPSD=workPSD,
            _configuration=_configuration,
            **kwargs,
        )
