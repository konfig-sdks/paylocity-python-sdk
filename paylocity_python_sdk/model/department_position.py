# coding: utf-8

"""
    WebLink API

    For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

    The version of the OpenAPI document: v2
    Contact: webservices@paylocity.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paylocity_python_sdk import schemas  # noqa: F401


class DepartmentPosition(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            changeReason = schemas.StrSchema
            clockBadgeNumber = schemas.StrSchema
            costCenter1 = schemas.StrSchema
            costCenter2 = schemas.StrSchema
            costCenter3 = schemas.StrSchema
            effectiveDate = schemas.DateSchema
            employeeType = schemas.StrSchema
            equalEmploymentOpportunityClass = schemas.StrSchema
            isSupervisorReviewer = schemas.BoolSchema
            jobTitle = schemas.StrSchema
            minimumWageExempt = schemas.BoolSchema
            overtimeExempt = schemas.BoolSchema
            payGroup = schemas.StrSchema
            positionCode = schemas.StrSchema
            shift = schemas.StrSchema
            supervisorCompanyNumber = schemas.StrSchema
            supervisorEmployeeId = schemas.StrSchema
            tipped = schemas.StrSchema
            unionAffiliationDate = schemas.DateSchema
            unionCode = schemas.StrSchema
            unionDuesCollected = schemas.BoolSchema
            unionInitiationCollected = schemas.BoolSchema
            unionPosition = schemas.StrSchema
            workersComp = schemas.StrSchema
            __annotations__ = {
                "changeReason": changeReason,
                "clockBadgeNumber": clockBadgeNumber,
                "costCenter1": costCenter1,
                "costCenter2": costCenter2,
                "costCenter3": costCenter3,
                "effectiveDate": effectiveDate,
                "employeeType": employeeType,
                "equalEmploymentOpportunityClass": equalEmploymentOpportunityClass,
                "isSupervisorReviewer": isSupervisorReviewer,
                "jobTitle": jobTitle,
                "minimumWageExempt": minimumWageExempt,
                "overtimeExempt": overtimeExempt,
                "payGroup": payGroup,
                "positionCode": positionCode,
                "shift": shift,
                "supervisorCompanyNumber": supervisorCompanyNumber,
                "supervisorEmployeeId": supervisorEmployeeId,
                "tipped": tipped,
                "unionAffiliationDate": unionAffiliationDate,
                "unionCode": unionCode,
                "unionDuesCollected": unionDuesCollected,
                "unionInitiationCollected": unionInitiationCollected,
                "unionPosition": unionPosition,
                "workersComp": workersComp,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["changeReason"]) -> MetaOapg.properties.changeReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clockBadgeNumber"]) -> MetaOapg.properties.clockBadgeNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costCenter1"]) -> MetaOapg.properties.costCenter1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costCenter2"]) -> MetaOapg.properties.costCenter2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costCenter3"]) -> MetaOapg.properties.costCenter3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectiveDate"]) -> MetaOapg.properties.effectiveDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeType"]) -> MetaOapg.properties.employeeType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["equalEmploymentOpportunityClass"]) -> MetaOapg.properties.equalEmploymentOpportunityClass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSupervisorReviewer"]) -> MetaOapg.properties.isSupervisorReviewer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobTitle"]) -> MetaOapg.properties.jobTitle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimumWageExempt"]) -> MetaOapg.properties.minimumWageExempt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overtimeExempt"]) -> MetaOapg.properties.overtimeExempt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payGroup"]) -> MetaOapg.properties.payGroup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["positionCode"]) -> MetaOapg.properties.positionCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shift"]) -> MetaOapg.properties.shift: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisorCompanyNumber"]) -> MetaOapg.properties.supervisorCompanyNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisorEmployeeId"]) -> MetaOapg.properties.supervisorEmployeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tipped"]) -> MetaOapg.properties.tipped: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unionAffiliationDate"]) -> MetaOapg.properties.unionAffiliationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unionCode"]) -> MetaOapg.properties.unionCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unionDuesCollected"]) -> MetaOapg.properties.unionDuesCollected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unionInitiationCollected"]) -> MetaOapg.properties.unionInitiationCollected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unionPosition"]) -> MetaOapg.properties.unionPosition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workersComp"]) -> MetaOapg.properties.workersComp: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["changeReason", "clockBadgeNumber", "costCenter1", "costCenter2", "costCenter3", "effectiveDate", "employeeType", "equalEmploymentOpportunityClass", "isSupervisorReviewer", "jobTitle", "minimumWageExempt", "overtimeExempt", "payGroup", "positionCode", "shift", "supervisorCompanyNumber", "supervisorEmployeeId", "tipped", "unionAffiliationDate", "unionCode", "unionDuesCollected", "unionInitiationCollected", "unionPosition", "workersComp", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["changeReason"]) -> typing.Union[MetaOapg.properties.changeReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clockBadgeNumber"]) -> typing.Union[MetaOapg.properties.clockBadgeNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costCenter1"]) -> typing.Union[MetaOapg.properties.costCenter1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costCenter2"]) -> typing.Union[MetaOapg.properties.costCenter2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costCenter3"]) -> typing.Union[MetaOapg.properties.costCenter3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectiveDate"]) -> typing.Union[MetaOapg.properties.effectiveDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeType"]) -> typing.Union[MetaOapg.properties.employeeType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["equalEmploymentOpportunityClass"]) -> typing.Union[MetaOapg.properties.equalEmploymentOpportunityClass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSupervisorReviewer"]) -> typing.Union[MetaOapg.properties.isSupervisorReviewer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobTitle"]) -> typing.Union[MetaOapg.properties.jobTitle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimumWageExempt"]) -> typing.Union[MetaOapg.properties.minimumWageExempt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overtimeExempt"]) -> typing.Union[MetaOapg.properties.overtimeExempt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payGroup"]) -> typing.Union[MetaOapg.properties.payGroup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["positionCode"]) -> typing.Union[MetaOapg.properties.positionCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shift"]) -> typing.Union[MetaOapg.properties.shift, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisorCompanyNumber"]) -> typing.Union[MetaOapg.properties.supervisorCompanyNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisorEmployeeId"]) -> typing.Union[MetaOapg.properties.supervisorEmployeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tipped"]) -> typing.Union[MetaOapg.properties.tipped, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unionAffiliationDate"]) -> typing.Union[MetaOapg.properties.unionAffiliationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unionCode"]) -> typing.Union[MetaOapg.properties.unionCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unionDuesCollected"]) -> typing.Union[MetaOapg.properties.unionDuesCollected, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unionInitiationCollected"]) -> typing.Union[MetaOapg.properties.unionInitiationCollected, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unionPosition"]) -> typing.Union[MetaOapg.properties.unionPosition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workersComp"]) -> typing.Union[MetaOapg.properties.workersComp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["changeReason", "clockBadgeNumber", "costCenter1", "costCenter2", "costCenter3", "effectiveDate", "employeeType", "equalEmploymentOpportunityClass", "isSupervisorReviewer", "jobTitle", "minimumWageExempt", "overtimeExempt", "payGroup", "positionCode", "shift", "supervisorCompanyNumber", "supervisorEmployeeId", "tipped", "unionAffiliationDate", "unionCode", "unionDuesCollected", "unionInitiationCollected", "unionPosition", "workersComp", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        changeReason: typing.Union[MetaOapg.properties.changeReason, str, schemas.Unset] = schemas.unset,
        clockBadgeNumber: typing.Union[MetaOapg.properties.clockBadgeNumber, str, schemas.Unset] = schemas.unset,
        costCenter1: typing.Union[MetaOapg.properties.costCenter1, str, schemas.Unset] = schemas.unset,
        costCenter2: typing.Union[MetaOapg.properties.costCenter2, str, schemas.Unset] = schemas.unset,
        costCenter3: typing.Union[MetaOapg.properties.costCenter3, str, schemas.Unset] = schemas.unset,
        effectiveDate: typing.Union[MetaOapg.properties.effectiveDate, str, date, schemas.Unset] = schemas.unset,
        employeeType: typing.Union[MetaOapg.properties.employeeType, str, schemas.Unset] = schemas.unset,
        equalEmploymentOpportunityClass: typing.Union[MetaOapg.properties.equalEmploymentOpportunityClass, str, schemas.Unset] = schemas.unset,
        isSupervisorReviewer: typing.Union[MetaOapg.properties.isSupervisorReviewer, bool, schemas.Unset] = schemas.unset,
        jobTitle: typing.Union[MetaOapg.properties.jobTitle, str, schemas.Unset] = schemas.unset,
        minimumWageExempt: typing.Union[MetaOapg.properties.minimumWageExempt, bool, schemas.Unset] = schemas.unset,
        overtimeExempt: typing.Union[MetaOapg.properties.overtimeExempt, bool, schemas.Unset] = schemas.unset,
        payGroup: typing.Union[MetaOapg.properties.payGroup, str, schemas.Unset] = schemas.unset,
        positionCode: typing.Union[MetaOapg.properties.positionCode, str, schemas.Unset] = schemas.unset,
        shift: typing.Union[MetaOapg.properties.shift, str, schemas.Unset] = schemas.unset,
        supervisorCompanyNumber: typing.Union[MetaOapg.properties.supervisorCompanyNumber, str, schemas.Unset] = schemas.unset,
        supervisorEmployeeId: typing.Union[MetaOapg.properties.supervisorEmployeeId, str, schemas.Unset] = schemas.unset,
        tipped: typing.Union[MetaOapg.properties.tipped, str, schemas.Unset] = schemas.unset,
        unionAffiliationDate: typing.Union[MetaOapg.properties.unionAffiliationDate, str, date, schemas.Unset] = schemas.unset,
        unionCode: typing.Union[MetaOapg.properties.unionCode, str, schemas.Unset] = schemas.unset,
        unionDuesCollected: typing.Union[MetaOapg.properties.unionDuesCollected, bool, schemas.Unset] = schemas.unset,
        unionInitiationCollected: typing.Union[MetaOapg.properties.unionInitiationCollected, bool, schemas.Unset] = schemas.unset,
        unionPosition: typing.Union[MetaOapg.properties.unionPosition, str, schemas.Unset] = schemas.unset,
        workersComp: typing.Union[MetaOapg.properties.workersComp, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DepartmentPosition':
        return super().__new__(
            cls,
            *args,
            changeReason=changeReason,
            clockBadgeNumber=clockBadgeNumber,
            costCenter1=costCenter1,
            costCenter2=costCenter2,
            costCenter3=costCenter3,
            effectiveDate=effectiveDate,
            employeeType=employeeType,
            equalEmploymentOpportunityClass=equalEmploymentOpportunityClass,
            isSupervisorReviewer=isSupervisorReviewer,
            jobTitle=jobTitle,
            minimumWageExempt=minimumWageExempt,
            overtimeExempt=overtimeExempt,
            payGroup=payGroup,
            positionCode=positionCode,
            shift=shift,
            supervisorCompanyNumber=supervisorCompanyNumber,
            supervisorEmployeeId=supervisorEmployeeId,
            tipped=tipped,
            unionAffiliationDate=unionAffiliationDate,
            unionCode=unionCode,
            unionDuesCollected=unionDuesCollected,
            unionInitiationCollected=unionInitiationCollected,
            unionPosition=unionPosition,
            workersComp=workersComp,
            _configuration=_configuration,
            **kwargs,
        )
