# coding: utf-8

"""
    WebLink API

    For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

    The version of the OpenAPI document: v2
    Contact: webservices@paylocity.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paylocity_python_sdk import schemas  # noqa: F401


class UpdateEmployee(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            address1 = schemas.StrSchema
            address2 = schemas.StrSchema
            adjSeniorityDate = schemas.DateSchema
            birthDate = schemas.DateSchema
            city = schemas.StrSchema
            companyNumber = schemas.StrSchema
            country = schemas.StrSchema
            county = schemas.StrSchema
            disability = schemas.StrSchema
            eligibleForRehire = schemas.BoolSchema
            employeeId = schemas.StrSchema
            employeeStatus = schemas.StrSchema
            empStatusChangeReason = schemas.StrSchema
            empStatusEffectiveDate = schemas.StrSchema
            ethnicity = schemas.StrSchema
            firstName = schemas.StrSchema
            homePhone = schemas.StrSchema
            lastName = schemas.StrSchema
            maritalStatus = schemas.StrSchema
            middleName = schemas.StrSchema
            nickname = schemas.StrSchema
            pager = schemas.StrSchema
            personalEmailAddress = schemas.StrSchema
            personalMobilePhone = schemas.StrSchema
            priorLastName = schemas.StrSchema
            salutation = schemas.StrSchema
            sex = schemas.StrSchema
            smoker = schemas.BoolSchema
            ssn = schemas.StrSchema
            state = schemas.StrSchema
            suffix = schemas.StrSchema
            suiExempt = schemas.BoolSchema
            suiExemptNotes = schemas.StrSchema
            suiExemptReason = schemas.StrSchema
            veteran = schemas.StrSchema
            workAddress1 = schemas.StrSchema
            workAddress2 = schemas.StrSchema
            workCity = schemas.StrSchema
            workCountry = schemas.StrSchema
            workCounty = schemas.StrSchema
            workEmailAddress = schemas.StrSchema
            workMailStop = schemas.StrSchema
            workMobilePhone = schemas.StrSchema
            workPager = schemas.StrSchema
            workPhone = schemas.StrSchema
            workPhoneExt = schemas.StrSchema
            workState = schemas.StrSchema
            workZip = schemas.StrSchema
            zip = schemas.StrSchema
            
            
            class benefitSetup(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['BenefitSetup']:
                        return BenefitSetup
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['BenefitSetup'], typing.List['BenefitSetup']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'benefitSetup':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'BenefitSetup':
                    return super().__getitem__(i)
            
            
            class departmentPosition(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DepartmentPosition']:
                        return DepartmentPosition
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['DepartmentPosition'], typing.List['DepartmentPosition']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'departmentPosition':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DepartmentPosition':
                    return super().__getitem__(i)
            
            
            class primaryPayRate(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PrimaryPayRate']:
                        return PrimaryPayRate
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PrimaryPayRate'], typing.List['PrimaryPayRate']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'primaryPayRate':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PrimaryPayRate':
                    return super().__getitem__(i)
            
            
            class webTime(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['WebTime']:
                        return WebTime
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['WebTime'], typing.List['WebTime']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'webTime':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'WebTime':
                    return super().__getitem__(i)
            __annotations__ = {
                "address1": address1,
                "address2": address2,
                "adjSeniorityDate": adjSeniorityDate,
                "birthDate": birthDate,
                "city": city,
                "companyNumber": companyNumber,
                "country": country,
                "county": county,
                "disability": disability,
                "eligibleForRehire": eligibleForRehire,
                "employeeId": employeeId,
                "employeeStatus": employeeStatus,
                "empStatusChangeReason": empStatusChangeReason,
                "empStatusEffectiveDate": empStatusEffectiveDate,
                "ethnicity": ethnicity,
                "firstName": firstName,
                "homePhone": homePhone,
                "lastName": lastName,
                "maritalStatus": maritalStatus,
                "middleName": middleName,
                "nickname": nickname,
                "pager": pager,
                "personalEmailAddress": personalEmailAddress,
                "personalMobilePhone": personalMobilePhone,
                "priorLastName": priorLastName,
                "salutation": salutation,
                "sex": sex,
                "smoker": smoker,
                "ssn": ssn,
                "state": state,
                "suffix": suffix,
                "suiExempt": suiExempt,
                "suiExemptNotes": suiExemptNotes,
                "suiExemptReason": suiExemptReason,
                "veteran": veteran,
                "workAddress1": workAddress1,
                "workAddress2": workAddress2,
                "workCity": workCity,
                "workCountry": workCountry,
                "workCounty": workCounty,
                "workEmailAddress": workEmailAddress,
                "workMailStop": workMailStop,
                "workMobilePhone": workMobilePhone,
                "workPager": workPager,
                "workPhone": workPhone,
                "workPhoneExt": workPhoneExt,
                "workState": workState,
                "workZip": workZip,
                "zip": zip,
                "benefitSetup": benefitSetup,
                "departmentPosition": departmentPosition,
                "primaryPayRate": primaryPayRate,
                "webTime": webTime,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address1"]) -> MetaOapg.properties.address1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address2"]) -> MetaOapg.properties.address2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adjSeniorityDate"]) -> MetaOapg.properties.adjSeniorityDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["birthDate"]) -> MetaOapg.properties.birthDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyNumber"]) -> MetaOapg.properties.companyNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["county"]) -> MetaOapg.properties.county: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disability"]) -> MetaOapg.properties.disability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eligibleForRehire"]) -> MetaOapg.properties.eligibleForRehire: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeStatus"]) -> MetaOapg.properties.employeeStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["empStatusChangeReason"]) -> MetaOapg.properties.empStatusChangeReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["empStatusEffectiveDate"]) -> MetaOapg.properties.empStatusEffectiveDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ethnicity"]) -> MetaOapg.properties.ethnicity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["homePhone"]) -> MetaOapg.properties.homePhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maritalStatus"]) -> MetaOapg.properties.maritalStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["middleName"]) -> MetaOapg.properties.middleName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nickname"]) -> MetaOapg.properties.nickname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pager"]) -> MetaOapg.properties.pager: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personalEmailAddress"]) -> MetaOapg.properties.personalEmailAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personalMobilePhone"]) -> MetaOapg.properties.personalMobilePhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priorLastName"]) -> MetaOapg.properties.priorLastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salutation"]) -> MetaOapg.properties.salutation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sex"]) -> MetaOapg.properties.sex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["smoker"]) -> MetaOapg.properties.smoker: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssn"]) -> MetaOapg.properties.ssn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suffix"]) -> MetaOapg.properties.suffix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suiExempt"]) -> MetaOapg.properties.suiExempt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suiExemptNotes"]) -> MetaOapg.properties.suiExemptNotes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suiExemptReason"]) -> MetaOapg.properties.suiExemptReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["veteran"]) -> MetaOapg.properties.veteran: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workAddress1"]) -> MetaOapg.properties.workAddress1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workAddress2"]) -> MetaOapg.properties.workAddress2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workCity"]) -> MetaOapg.properties.workCity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workCountry"]) -> MetaOapg.properties.workCountry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workCounty"]) -> MetaOapg.properties.workCounty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workEmailAddress"]) -> MetaOapg.properties.workEmailAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workMailStop"]) -> MetaOapg.properties.workMailStop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workMobilePhone"]) -> MetaOapg.properties.workMobilePhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workPager"]) -> MetaOapg.properties.workPager: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workPhone"]) -> MetaOapg.properties.workPhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workPhoneExt"]) -> MetaOapg.properties.workPhoneExt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workState"]) -> MetaOapg.properties.workState: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workZip"]) -> MetaOapg.properties.workZip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zip"]) -> MetaOapg.properties.zip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["benefitSetup"]) -> MetaOapg.properties.benefitSetup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departmentPosition"]) -> MetaOapg.properties.departmentPosition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryPayRate"]) -> MetaOapg.properties.primaryPayRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webTime"]) -> MetaOapg.properties.webTime: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["address1", "address2", "adjSeniorityDate", "birthDate", "city", "companyNumber", "country", "county", "disability", "eligibleForRehire", "employeeId", "employeeStatus", "empStatusChangeReason", "empStatusEffectiveDate", "ethnicity", "firstName", "homePhone", "lastName", "maritalStatus", "middleName", "nickname", "pager", "personalEmailAddress", "personalMobilePhone", "priorLastName", "salutation", "sex", "smoker", "ssn", "state", "suffix", "suiExempt", "suiExemptNotes", "suiExemptReason", "veteran", "workAddress1", "workAddress2", "workCity", "workCountry", "workCounty", "workEmailAddress", "workMailStop", "workMobilePhone", "workPager", "workPhone", "workPhoneExt", "workState", "workZip", "zip", "benefitSetup", "departmentPosition", "primaryPayRate", "webTime", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address1"]) -> typing.Union[MetaOapg.properties.address1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address2"]) -> typing.Union[MetaOapg.properties.address2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adjSeniorityDate"]) -> typing.Union[MetaOapg.properties.adjSeniorityDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["birthDate"]) -> typing.Union[MetaOapg.properties.birthDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyNumber"]) -> typing.Union[MetaOapg.properties.companyNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["county"]) -> typing.Union[MetaOapg.properties.county, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disability"]) -> typing.Union[MetaOapg.properties.disability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eligibleForRehire"]) -> typing.Union[MetaOapg.properties.eligibleForRehire, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeStatus"]) -> typing.Union[MetaOapg.properties.employeeStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["empStatusChangeReason"]) -> typing.Union[MetaOapg.properties.empStatusChangeReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["empStatusEffectiveDate"]) -> typing.Union[MetaOapg.properties.empStatusEffectiveDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ethnicity"]) -> typing.Union[MetaOapg.properties.ethnicity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["homePhone"]) -> typing.Union[MetaOapg.properties.homePhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maritalStatus"]) -> typing.Union[MetaOapg.properties.maritalStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["middleName"]) -> typing.Union[MetaOapg.properties.middleName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nickname"]) -> typing.Union[MetaOapg.properties.nickname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pager"]) -> typing.Union[MetaOapg.properties.pager, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personalEmailAddress"]) -> typing.Union[MetaOapg.properties.personalEmailAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personalMobilePhone"]) -> typing.Union[MetaOapg.properties.personalMobilePhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priorLastName"]) -> typing.Union[MetaOapg.properties.priorLastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salutation"]) -> typing.Union[MetaOapg.properties.salutation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sex"]) -> typing.Union[MetaOapg.properties.sex, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["smoker"]) -> typing.Union[MetaOapg.properties.smoker, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssn"]) -> typing.Union[MetaOapg.properties.ssn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suffix"]) -> typing.Union[MetaOapg.properties.suffix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suiExempt"]) -> typing.Union[MetaOapg.properties.suiExempt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suiExemptNotes"]) -> typing.Union[MetaOapg.properties.suiExemptNotes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suiExemptReason"]) -> typing.Union[MetaOapg.properties.suiExemptReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["veteran"]) -> typing.Union[MetaOapg.properties.veteran, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workAddress1"]) -> typing.Union[MetaOapg.properties.workAddress1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workAddress2"]) -> typing.Union[MetaOapg.properties.workAddress2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workCity"]) -> typing.Union[MetaOapg.properties.workCity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workCountry"]) -> typing.Union[MetaOapg.properties.workCountry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workCounty"]) -> typing.Union[MetaOapg.properties.workCounty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workEmailAddress"]) -> typing.Union[MetaOapg.properties.workEmailAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workMailStop"]) -> typing.Union[MetaOapg.properties.workMailStop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workMobilePhone"]) -> typing.Union[MetaOapg.properties.workMobilePhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workPager"]) -> typing.Union[MetaOapg.properties.workPager, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workPhone"]) -> typing.Union[MetaOapg.properties.workPhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workPhoneExt"]) -> typing.Union[MetaOapg.properties.workPhoneExt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workState"]) -> typing.Union[MetaOapg.properties.workState, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workZip"]) -> typing.Union[MetaOapg.properties.workZip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zip"]) -> typing.Union[MetaOapg.properties.zip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["benefitSetup"]) -> typing.Union[MetaOapg.properties.benefitSetup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departmentPosition"]) -> typing.Union[MetaOapg.properties.departmentPosition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryPayRate"]) -> typing.Union[MetaOapg.properties.primaryPayRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webTime"]) -> typing.Union[MetaOapg.properties.webTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["address1", "address2", "adjSeniorityDate", "birthDate", "city", "companyNumber", "country", "county", "disability", "eligibleForRehire", "employeeId", "employeeStatus", "empStatusChangeReason", "empStatusEffectiveDate", "ethnicity", "firstName", "homePhone", "lastName", "maritalStatus", "middleName", "nickname", "pager", "personalEmailAddress", "personalMobilePhone", "priorLastName", "salutation", "sex", "smoker", "ssn", "state", "suffix", "suiExempt", "suiExemptNotes", "suiExemptReason", "veteran", "workAddress1", "workAddress2", "workCity", "workCountry", "workCounty", "workEmailAddress", "workMailStop", "workMobilePhone", "workPager", "workPhone", "workPhoneExt", "workState", "workZip", "zip", "benefitSetup", "departmentPosition", "primaryPayRate", "webTime", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        address1: typing.Union[MetaOapg.properties.address1, str, schemas.Unset] = schemas.unset,
        address2: typing.Union[MetaOapg.properties.address2, str, schemas.Unset] = schemas.unset,
        adjSeniorityDate: typing.Union[MetaOapg.properties.adjSeniorityDate, str, date, schemas.Unset] = schemas.unset,
        birthDate: typing.Union[MetaOapg.properties.birthDate, str, date, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        companyNumber: typing.Union[MetaOapg.properties.companyNumber, str, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        county: typing.Union[MetaOapg.properties.county, str, schemas.Unset] = schemas.unset,
        disability: typing.Union[MetaOapg.properties.disability, str, schemas.Unset] = schemas.unset,
        eligibleForRehire: typing.Union[MetaOapg.properties.eligibleForRehire, bool, schemas.Unset] = schemas.unset,
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        employeeStatus: typing.Union[MetaOapg.properties.employeeStatus, str, schemas.Unset] = schemas.unset,
        empStatusChangeReason: typing.Union[MetaOapg.properties.empStatusChangeReason, str, schemas.Unset] = schemas.unset,
        empStatusEffectiveDate: typing.Union[MetaOapg.properties.empStatusEffectiveDate, str, schemas.Unset] = schemas.unset,
        ethnicity: typing.Union[MetaOapg.properties.ethnicity, str, schemas.Unset] = schemas.unset,
        firstName: typing.Union[MetaOapg.properties.firstName, str, schemas.Unset] = schemas.unset,
        homePhone: typing.Union[MetaOapg.properties.homePhone, str, schemas.Unset] = schemas.unset,
        lastName: typing.Union[MetaOapg.properties.lastName, str, schemas.Unset] = schemas.unset,
        maritalStatus: typing.Union[MetaOapg.properties.maritalStatus, str, schemas.Unset] = schemas.unset,
        middleName: typing.Union[MetaOapg.properties.middleName, str, schemas.Unset] = schemas.unset,
        nickname: typing.Union[MetaOapg.properties.nickname, str, schemas.Unset] = schemas.unset,
        pager: typing.Union[MetaOapg.properties.pager, str, schemas.Unset] = schemas.unset,
        personalEmailAddress: typing.Union[MetaOapg.properties.personalEmailAddress, str, schemas.Unset] = schemas.unset,
        personalMobilePhone: typing.Union[MetaOapg.properties.personalMobilePhone, str, schemas.Unset] = schemas.unset,
        priorLastName: typing.Union[MetaOapg.properties.priorLastName, str, schemas.Unset] = schemas.unset,
        salutation: typing.Union[MetaOapg.properties.salutation, str, schemas.Unset] = schemas.unset,
        sex: typing.Union[MetaOapg.properties.sex, str, schemas.Unset] = schemas.unset,
        smoker: typing.Union[MetaOapg.properties.smoker, bool, schemas.Unset] = schemas.unset,
        ssn: typing.Union[MetaOapg.properties.ssn, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        suffix: typing.Union[MetaOapg.properties.suffix, str, schemas.Unset] = schemas.unset,
        suiExempt: typing.Union[MetaOapg.properties.suiExempt, bool, schemas.Unset] = schemas.unset,
        suiExemptNotes: typing.Union[MetaOapg.properties.suiExemptNotes, str, schemas.Unset] = schemas.unset,
        suiExemptReason: typing.Union[MetaOapg.properties.suiExemptReason, str, schemas.Unset] = schemas.unset,
        veteran: typing.Union[MetaOapg.properties.veteran, str, schemas.Unset] = schemas.unset,
        workAddress1: typing.Union[MetaOapg.properties.workAddress1, str, schemas.Unset] = schemas.unset,
        workAddress2: typing.Union[MetaOapg.properties.workAddress2, str, schemas.Unset] = schemas.unset,
        workCity: typing.Union[MetaOapg.properties.workCity, str, schemas.Unset] = schemas.unset,
        workCountry: typing.Union[MetaOapg.properties.workCountry, str, schemas.Unset] = schemas.unset,
        workCounty: typing.Union[MetaOapg.properties.workCounty, str, schemas.Unset] = schemas.unset,
        workEmailAddress: typing.Union[MetaOapg.properties.workEmailAddress, str, schemas.Unset] = schemas.unset,
        workMailStop: typing.Union[MetaOapg.properties.workMailStop, str, schemas.Unset] = schemas.unset,
        workMobilePhone: typing.Union[MetaOapg.properties.workMobilePhone, str, schemas.Unset] = schemas.unset,
        workPager: typing.Union[MetaOapg.properties.workPager, str, schemas.Unset] = schemas.unset,
        workPhone: typing.Union[MetaOapg.properties.workPhone, str, schemas.Unset] = schemas.unset,
        workPhoneExt: typing.Union[MetaOapg.properties.workPhoneExt, str, schemas.Unset] = schemas.unset,
        workState: typing.Union[MetaOapg.properties.workState, str, schemas.Unset] = schemas.unset,
        workZip: typing.Union[MetaOapg.properties.workZip, str, schemas.Unset] = schemas.unset,
        zip: typing.Union[MetaOapg.properties.zip, str, schemas.Unset] = schemas.unset,
        benefitSetup: typing.Union[MetaOapg.properties.benefitSetup, list, tuple, schemas.Unset] = schemas.unset,
        departmentPosition: typing.Union[MetaOapg.properties.departmentPosition, list, tuple, schemas.Unset] = schemas.unset,
        primaryPayRate: typing.Union[MetaOapg.properties.primaryPayRate, list, tuple, schemas.Unset] = schemas.unset,
        webTime: typing.Union[MetaOapg.properties.webTime, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UpdateEmployee':
        return super().__new__(
            cls,
            *args,
            address1=address1,
            address2=address2,
            adjSeniorityDate=adjSeniorityDate,
            birthDate=birthDate,
            city=city,
            companyNumber=companyNumber,
            country=country,
            county=county,
            disability=disability,
            eligibleForRehire=eligibleForRehire,
            employeeId=employeeId,
            employeeStatus=employeeStatus,
            empStatusChangeReason=empStatusChangeReason,
            empStatusEffectiveDate=empStatusEffectiveDate,
            ethnicity=ethnicity,
            firstName=firstName,
            homePhone=homePhone,
            lastName=lastName,
            maritalStatus=maritalStatus,
            middleName=middleName,
            nickname=nickname,
            pager=pager,
            personalEmailAddress=personalEmailAddress,
            personalMobilePhone=personalMobilePhone,
            priorLastName=priorLastName,
            salutation=salutation,
            sex=sex,
            smoker=smoker,
            ssn=ssn,
            state=state,
            suffix=suffix,
            suiExempt=suiExempt,
            suiExemptNotes=suiExemptNotes,
            suiExemptReason=suiExemptReason,
            veteran=veteran,
            workAddress1=workAddress1,
            workAddress2=workAddress2,
            workCity=workCity,
            workCountry=workCountry,
            workCounty=workCounty,
            workEmailAddress=workEmailAddress,
            workMailStop=workMailStop,
            workMobilePhone=workMobilePhone,
            workPager=workPager,
            workPhone=workPhone,
            workPhoneExt=workPhoneExt,
            workState=workState,
            workZip=workZip,
            zip=zip,
            benefitSetup=benefitSetup,
            departmentPosition=departmentPosition,
            primaryPayRate=primaryPayRate,
            webTime=webTime,
            _configuration=_configuration,
            **kwargs,
        )

from paylocity_python_sdk.model.benefit_setup import BenefitSetup
from paylocity_python_sdk.model.department_position import DepartmentPosition
from paylocity_python_sdk.model.primary_pay_rate import PrimaryPayRate
from paylocity_python_sdk.model.web_time import WebTime
