# coding: utf-8

"""
    WebLink API

    For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

    The version of the OpenAPI document: v2
    Contact: webservices@paylocity.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paylocity_python_sdk import schemas  # noqa: F401


class NewWorkEligibility(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            alienOrAdmissionDocumentNbr = schemas.StrSchema
            i9DateVerified = schemas.DateSchema
            i9Notes = schemas.StrSchema
            i9Verified = schemas.BoolSchema
            sSNDateVerified = schemas.DateSchema
            sSNNotes = schemas.StrSchema
            sSNVerified = schemas.BoolSchema
            visaType = schemas.StrSchema
            workAuthorization = schemas.StrSchema
            workUntil = schemas.DateSchema
            attestedDate = schemas.DateSchema
            i94AdmissionNumber = schemas.StrSchema
            foreignPassportNumber = schemas.StrSchema
            countryOfIssuance = schemas.StrSchema
            __annotations__ = {
                "alienOrAdmissionDocumentNbr": alienOrAdmissionDocumentNbr,
                "i9DateVerified": i9DateVerified,
                "i9Notes": i9Notes,
                "i9Verified": i9Verified,
                "sSNDateVerified": sSNDateVerified,
                "sSNNotes": sSNNotes,
                "sSNVerified": sSNVerified,
                "visaType": visaType,
                "workAuthorization": workAuthorization,
                "workUntil": workUntil,
                "attestedDate": attestedDate,
                "i94AdmissionNumber": i94AdmissionNumber,
                "foreignPassportNumber": foreignPassportNumber,
                "countryOfIssuance": countryOfIssuance,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alienOrAdmissionDocumentNbr"]) -> MetaOapg.properties.alienOrAdmissionDocumentNbr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["i9DateVerified"]) -> MetaOapg.properties.i9DateVerified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["i9Notes"]) -> MetaOapg.properties.i9Notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["i9Verified"]) -> MetaOapg.properties.i9Verified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sSNDateVerified"]) -> MetaOapg.properties.sSNDateVerified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sSNNotes"]) -> MetaOapg.properties.sSNNotes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sSNVerified"]) -> MetaOapg.properties.sSNVerified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visaType"]) -> MetaOapg.properties.visaType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workAuthorization"]) -> MetaOapg.properties.workAuthorization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workUntil"]) -> MetaOapg.properties.workUntil: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attestedDate"]) -> MetaOapg.properties.attestedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["i94AdmissionNumber"]) -> MetaOapg.properties.i94AdmissionNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["foreignPassportNumber"]) -> MetaOapg.properties.foreignPassportNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryOfIssuance"]) -> MetaOapg.properties.countryOfIssuance: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["alienOrAdmissionDocumentNbr", "i9DateVerified", "i9Notes", "i9Verified", "sSNDateVerified", "sSNNotes", "sSNVerified", "visaType", "workAuthorization", "workUntil", "attestedDate", "i94AdmissionNumber", "foreignPassportNumber", "countryOfIssuance", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alienOrAdmissionDocumentNbr"]) -> typing.Union[MetaOapg.properties.alienOrAdmissionDocumentNbr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["i9DateVerified"]) -> typing.Union[MetaOapg.properties.i9DateVerified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["i9Notes"]) -> typing.Union[MetaOapg.properties.i9Notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["i9Verified"]) -> typing.Union[MetaOapg.properties.i9Verified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sSNDateVerified"]) -> typing.Union[MetaOapg.properties.sSNDateVerified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sSNNotes"]) -> typing.Union[MetaOapg.properties.sSNNotes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sSNVerified"]) -> typing.Union[MetaOapg.properties.sSNVerified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visaType"]) -> typing.Union[MetaOapg.properties.visaType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workAuthorization"]) -> typing.Union[MetaOapg.properties.workAuthorization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workUntil"]) -> typing.Union[MetaOapg.properties.workUntil, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attestedDate"]) -> typing.Union[MetaOapg.properties.attestedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["i94AdmissionNumber"]) -> typing.Union[MetaOapg.properties.i94AdmissionNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["foreignPassportNumber"]) -> typing.Union[MetaOapg.properties.foreignPassportNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryOfIssuance"]) -> typing.Union[MetaOapg.properties.countryOfIssuance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["alienOrAdmissionDocumentNbr", "i9DateVerified", "i9Notes", "i9Verified", "sSNDateVerified", "sSNNotes", "sSNVerified", "visaType", "workAuthorization", "workUntil", "attestedDate", "i94AdmissionNumber", "foreignPassportNumber", "countryOfIssuance", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        alienOrAdmissionDocumentNbr: typing.Union[MetaOapg.properties.alienOrAdmissionDocumentNbr, str, schemas.Unset] = schemas.unset,
        i9DateVerified: typing.Union[MetaOapg.properties.i9DateVerified, str, date, schemas.Unset] = schemas.unset,
        i9Notes: typing.Union[MetaOapg.properties.i9Notes, str, schemas.Unset] = schemas.unset,
        i9Verified: typing.Union[MetaOapg.properties.i9Verified, bool, schemas.Unset] = schemas.unset,
        sSNDateVerified: typing.Union[MetaOapg.properties.sSNDateVerified, str, date, schemas.Unset] = schemas.unset,
        sSNNotes: typing.Union[MetaOapg.properties.sSNNotes, str, schemas.Unset] = schemas.unset,
        sSNVerified: typing.Union[MetaOapg.properties.sSNVerified, bool, schemas.Unset] = schemas.unset,
        visaType: typing.Union[MetaOapg.properties.visaType, str, schemas.Unset] = schemas.unset,
        workAuthorization: typing.Union[MetaOapg.properties.workAuthorization, str, schemas.Unset] = schemas.unset,
        workUntil: typing.Union[MetaOapg.properties.workUntil, str, date, schemas.Unset] = schemas.unset,
        attestedDate: typing.Union[MetaOapg.properties.attestedDate, str, date, schemas.Unset] = schemas.unset,
        i94AdmissionNumber: typing.Union[MetaOapg.properties.i94AdmissionNumber, str, schemas.Unset] = schemas.unset,
        foreignPassportNumber: typing.Union[MetaOapg.properties.foreignPassportNumber, str, schemas.Unset] = schemas.unset,
        countryOfIssuance: typing.Union[MetaOapg.properties.countryOfIssuance, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NewWorkEligibility':
        return super().__new__(
            cls,
            *args,
            alienOrAdmissionDocumentNbr=alienOrAdmissionDocumentNbr,
            i9DateVerified=i9DateVerified,
            i9Notes=i9Notes,
            i9Verified=i9Verified,
            sSNDateVerified=sSNDateVerified,
            sSNNotes=sSNNotes,
            sSNVerified=sSNVerified,
            visaType=visaType,
            workAuthorization=workAuthorization,
            workUntil=workUntil,
            attestedDate=attestedDate,
            i94AdmissionNumber=i94AdmissionNumber,
            foreignPassportNumber=foreignPassportNumber,
            countryOfIssuance=countryOfIssuance,
            _configuration=_configuration,
            **kwargs,
        )
