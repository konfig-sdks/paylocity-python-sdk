# coding: utf-8

"""
    WebLink API

    For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

    The version of the OpenAPI document: v2
    Contact: webservices@paylocity.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paylocity_python_sdk import schemas  # noqa: F401


class NewEmployee(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "companyNumber",
        }
        
        class properties:
            companyNumber = schemas.StrSchema
            title = schemas.StrSchema
            address1 = schemas.StrSchema
            address2 = schemas.StrSchema
            adjSeniorityDate = schemas.DateSchema
            annualSalary = schemas.NumberSchema
            autoGenerateEmployeeId = schemas.BoolSchema
            autoPay = schemas.BoolSchema
            autoPayType = schemas.StrSchema
            baseRate = schemas.NumberSchema
            birthDate = schemas.DateSchema
            city = schemas.StrSchema
            clockBadge = schemas.StrSchema
            costCenter1 = schemas.StrSchema
            costCenter2 = schemas.StrSchema
            costCenter3 = schemas.StrSchema
            country = schemas.StrSchema
            county = schemas.StrSchema
            defaultHours = schemas.NumberSchema
            disability = schemas.BoolSchema
            eligibleForRehire = schemas.BoolSchema
            employee943 = schemas.BoolSchema
            employeeId = schemas.StrSchema
            employeeStatus = schemas.StrSchema
            employmentType = schemas.StrSchema
            equalEmploymentOpportunityClass = schemas.StrSchema
            ethnicity = schemas.StrSchema
            firstName = schemas.StrSchema
            fitwExempt = schemas.BoolSchema
            fitwExemptNotes = schemas.StrSchema
            fitwExemptReason = schemas.StrSchema
            futaExempt = schemas.BoolSchema
            futaExemptNotes = schemas.StrSchema
            futaExemptReason = schemas.StrSchema
            hireDate = schemas.DateSchema
            homePhone = schemas.StrSchema
            isSupervisorReviewer = schemas.BoolSchema
            lastName = schemas.StrSchema
            maritalStatus = schemas.StrSchema
            medExempt = schemas.BoolSchema
            medExemptNotes = schemas.StrSchema
            medExemptReason = schemas.StrSchema
            middleName = schemas.StrSchema
            minimumWageExempt = schemas.BoolSchema
            nickname = schemas.StrSchema
            overrideTitle = schemas.BoolSchema
            overtimeExempt = schemas.BoolSchema
            payFrequency = schemas.StrSchema
            payGrade = schemas.StrSchema
            payGroup = schemas.StrSchema
            payRateNote = schemas.StrSchema
            pension = schemas.BoolSchema
            personalEmailAddress = schemas.StrSchema
            personalMobilePhone = schemas.StrSchema
            positionCode = schemas.StrSchema
            primaryPayRateEffectiveDate = schemas.DateSchema
            priorLastName = schemas.StrSchema
            rateCode = schemas.StrSchema
            ratePer = schemas.StrSchema
            reviewerCo = schemas.StrSchema
            reviewerId = schemas.StrSchema
            salary = schemas.NumberSchema
            salutation = schemas.StrSchema
            sex = schemas.StrSchema
            shift = schemas.StrSchema
            sitwExempt = schemas.BoolSchema
            sitwExemptNotes = schemas.StrSchema
            sitwExemptReason = schemas.StrSchema
            smoker = schemas.BoolSchema
            ssExempt = schemas.BoolSchema
            ssExemptNotes = schemas.StrSchema
            ssExemptReason = schemas.StrSchema
            ssn = schemas.StrSchema
            state = schemas.StrSchema
            statutory = schemas.BoolSchema
            suffix = schemas.StrSchema
            suiExempt = schemas.BoolSchema
            suiExemptNotes = schemas.StrSchema
            suiExemptReason = schemas.StrSchema
            suiState = schemas.StrSchema
            supervisorCo = schemas.StrSchema
            supervisorID = schemas.StrSchema
            taxDistributionCode1099R = schemas.StrSchema
            taxForm = schemas.StrSchema
            tipped = schemas.StrSchema
            unionCode = schemas.StrSchema
            unionDate = schemas.DateSchema
            unionDues = schemas.BoolSchema
            unionInitFees = schemas.BoolSchema
            unionPosition = schemas.StrSchema
            veteran = schemas.BoolSchema
            waliExempt = schemas.BoolSchema
            waliExemptNotes = schemas.StrSchema
            waliExemptReason = schemas.StrSchema
            workAddress1 = schemas.StrSchema
            workAddress2 = schemas.StrSchema
            workCity = schemas.StrSchema
            workCountry = schemas.StrSchema
            workCounty = schemas.StrSchema
            workEmailAddress = schemas.StrSchema
            workersComp = schemas.StrSchema
            workExt = schemas.StrSchema
            workLocation = schemas.StrSchema
            workMailStop = schemas.StrSchema
            workMobilePhone = schemas.StrSchema
            workPager = schemas.StrSchema
            workPhone = schemas.StrSchema
            workState = schemas.StrSchema
            workZip = schemas.StrSchema
            zip = schemas.StrSchema
            syncWebTimeRecord = schemas.BoolSchema
            
            
            class newBenefitClassSetup(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NewBenefitClassSetup']:
                        return NewBenefitClassSetup
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['NewBenefitClassSetup'], typing.List['NewBenefitClassSetup']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'newBenefitClassSetup':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NewBenefitClassSetup':
                    return super().__getitem__(i)
            
            
            class newMainDirectDeposit(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NewMainDirectDeposit']:
                        return NewMainDirectDeposit
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['NewMainDirectDeposit'], typing.List['NewMainDirectDeposit']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'newMainDirectDeposit':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NewMainDirectDeposit':
                    return super().__getitem__(i)
            
            
            class newAdditionalDirectDeposit(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NewAdditionalDirectDeposit']:
                        return NewAdditionalDirectDeposit
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['NewAdditionalDirectDeposit'], typing.List['NewAdditionalDirectDeposit']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'newAdditionalDirectDeposit':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NewAdditionalDirectDeposit':
                    return super().__getitem__(i)
            
            
            class newFedTax(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NewFedTax']:
                        return NewFedTax
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['NewFedTax'], typing.List['NewFedTax']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'newFedTax':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NewFedTax':
                    return super().__getitem__(i)
            
            
            class newLocalTax(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NewLocalTax']:
                        return NewLocalTax
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['NewLocalTax'], typing.List['NewLocalTax']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'newLocalTax':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NewLocalTax':
                    return super().__getitem__(i)
            
            
            class newStateTax(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NewStateTax']:
                        return NewStateTax
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['NewStateTax'], typing.List['NewStateTax']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'newStateTax':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NewStateTax':
                    return super().__getitem__(i)
            
            
            class newWorkEligibility(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NewWorkEligibility']:
                        return NewWorkEligibility
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['NewWorkEligibility'], typing.List['NewWorkEligibility']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'newWorkEligibility':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NewWorkEligibility':
                    return super().__getitem__(i)
            __annotations__ = {
                "companyNumber": companyNumber,
                "title": title,
                "address1": address1,
                "address2": address2,
                "adjSeniorityDate": adjSeniorityDate,
                "annualSalary": annualSalary,
                "autoGenerateEmployeeId": autoGenerateEmployeeId,
                "autoPay": autoPay,
                "autoPayType": autoPayType,
                "baseRate": baseRate,
                "birthDate": birthDate,
                "city": city,
                "clockBadge": clockBadge,
                "costCenter1": costCenter1,
                "costCenter2": costCenter2,
                "costCenter3": costCenter3,
                "country": country,
                "county": county,
                "defaultHours": defaultHours,
                "disability": disability,
                "eligibleForRehire": eligibleForRehire,
                "employee943": employee943,
                "employeeId": employeeId,
                "employeeStatus": employeeStatus,
                "employmentType": employmentType,
                "equalEmploymentOpportunityClass": equalEmploymentOpportunityClass,
                "ethnicity": ethnicity,
                "firstName": firstName,
                "fitwExempt": fitwExempt,
                "fitwExemptNotes": fitwExemptNotes,
                "fitwExemptReason": fitwExemptReason,
                "futaExempt": futaExempt,
                "futaExemptNotes": futaExemptNotes,
                "futaExemptReason": futaExemptReason,
                "hireDate": hireDate,
                "homePhone": homePhone,
                "isSupervisorReviewer": isSupervisorReviewer,
                "lastName": lastName,
                "maritalStatus": maritalStatus,
                "medExempt": medExempt,
                "medExemptNotes": medExemptNotes,
                "medExemptReason": medExemptReason,
                "middleName": middleName,
                "minimumWageExempt": minimumWageExempt,
                "nickname": nickname,
                "overrideTitle": overrideTitle,
                "overtimeExempt": overtimeExempt,
                "payFrequency": payFrequency,
                "payGrade": payGrade,
                "payGroup": payGroup,
                "payRateNote": payRateNote,
                "pension": pension,
                "personalEmailAddress": personalEmailAddress,
                "personalMobilePhone": personalMobilePhone,
                "positionCode": positionCode,
                "primaryPayRateEffectiveDate": primaryPayRateEffectiveDate,
                "priorLastName": priorLastName,
                "rateCode": rateCode,
                "ratePer": ratePer,
                "reviewerCo": reviewerCo,
                "reviewerId": reviewerId,
                "salary": salary,
                "salutation": salutation,
                "sex": sex,
                "shift": shift,
                "sitwExempt": sitwExempt,
                "sitwExemptNotes": sitwExemptNotes,
                "sitwExemptReason": sitwExemptReason,
                "smoker": smoker,
                "ssExempt": ssExempt,
                "ssExemptNotes": ssExemptNotes,
                "ssExemptReason": ssExemptReason,
                "ssn": ssn,
                "state": state,
                "statutory": statutory,
                "suffix": suffix,
                "suiExempt": suiExempt,
                "suiExemptNotes": suiExemptNotes,
                "suiExemptReason": suiExemptReason,
                "suiState": suiState,
                "supervisorCo": supervisorCo,
                "supervisorID": supervisorID,
                "taxDistributionCode1099R": taxDistributionCode1099R,
                "taxForm": taxForm,
                "tipped": tipped,
                "unionCode": unionCode,
                "unionDate": unionDate,
                "unionDues": unionDues,
                "unionInitFees": unionInitFees,
                "unionPosition": unionPosition,
                "veteran": veteran,
                "waliExempt": waliExempt,
                "waliExemptNotes": waliExemptNotes,
                "waliExemptReason": waliExemptReason,
                "workAddress1": workAddress1,
                "workAddress2": workAddress2,
                "workCity": workCity,
                "workCountry": workCountry,
                "workCounty": workCounty,
                "workEmailAddress": workEmailAddress,
                "workersComp": workersComp,
                "workExt": workExt,
                "workLocation": workLocation,
                "workMailStop": workMailStop,
                "workMobilePhone": workMobilePhone,
                "workPager": workPager,
                "workPhone": workPhone,
                "workState": workState,
                "workZip": workZip,
                "zip": zip,
                "syncWebTimeRecord": syncWebTimeRecord,
                "newBenefitClassSetup": newBenefitClassSetup,
                "newMainDirectDeposit": newMainDirectDeposit,
                "newAdditionalDirectDeposit": newAdditionalDirectDeposit,
                "newFedTax": newFedTax,
                "newLocalTax": newLocalTax,
                "newStateTax": newStateTax,
                "newWorkEligibility": newWorkEligibility,
            }
    
    companyNumber: MetaOapg.properties.companyNumber
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyNumber"]) -> MetaOapg.properties.companyNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address1"]) -> MetaOapg.properties.address1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address2"]) -> MetaOapg.properties.address2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["adjSeniorityDate"]) -> MetaOapg.properties.adjSeniorityDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annualSalary"]) -> MetaOapg.properties.annualSalary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["autoGenerateEmployeeId"]) -> MetaOapg.properties.autoGenerateEmployeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["autoPay"]) -> MetaOapg.properties.autoPay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["autoPayType"]) -> MetaOapg.properties.autoPayType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["baseRate"]) -> MetaOapg.properties.baseRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["birthDate"]) -> MetaOapg.properties.birthDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clockBadge"]) -> MetaOapg.properties.clockBadge: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costCenter1"]) -> MetaOapg.properties.costCenter1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costCenter2"]) -> MetaOapg.properties.costCenter2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costCenter3"]) -> MetaOapg.properties.costCenter3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["county"]) -> MetaOapg.properties.county: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultHours"]) -> MetaOapg.properties.defaultHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disability"]) -> MetaOapg.properties.disability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eligibleForRehire"]) -> MetaOapg.properties.eligibleForRehire: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee943"]) -> MetaOapg.properties.employee943: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeId"]) -> MetaOapg.properties.employeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeStatus"]) -> MetaOapg.properties.employeeStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employmentType"]) -> MetaOapg.properties.employmentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["equalEmploymentOpportunityClass"]) -> MetaOapg.properties.equalEmploymentOpportunityClass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ethnicity"]) -> MetaOapg.properties.ethnicity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fitwExempt"]) -> MetaOapg.properties.fitwExempt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fitwExemptNotes"]) -> MetaOapg.properties.fitwExemptNotes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fitwExemptReason"]) -> MetaOapg.properties.fitwExemptReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["futaExempt"]) -> MetaOapg.properties.futaExempt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["futaExemptNotes"]) -> MetaOapg.properties.futaExemptNotes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["futaExemptReason"]) -> MetaOapg.properties.futaExemptReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hireDate"]) -> MetaOapg.properties.hireDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["homePhone"]) -> MetaOapg.properties.homePhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSupervisorReviewer"]) -> MetaOapg.properties.isSupervisorReviewer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maritalStatus"]) -> MetaOapg.properties.maritalStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["medExempt"]) -> MetaOapg.properties.medExempt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["medExemptNotes"]) -> MetaOapg.properties.medExemptNotes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["medExemptReason"]) -> MetaOapg.properties.medExemptReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["middleName"]) -> MetaOapg.properties.middleName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimumWageExempt"]) -> MetaOapg.properties.minimumWageExempt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nickname"]) -> MetaOapg.properties.nickname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overrideTitle"]) -> MetaOapg.properties.overrideTitle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overtimeExempt"]) -> MetaOapg.properties.overtimeExempt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payFrequency"]) -> MetaOapg.properties.payFrequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payGrade"]) -> MetaOapg.properties.payGrade: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payGroup"]) -> MetaOapg.properties.payGroup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payRateNote"]) -> MetaOapg.properties.payRateNote: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pension"]) -> MetaOapg.properties.pension: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personalEmailAddress"]) -> MetaOapg.properties.personalEmailAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personalMobilePhone"]) -> MetaOapg.properties.personalMobilePhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["positionCode"]) -> MetaOapg.properties.positionCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryPayRateEffectiveDate"]) -> MetaOapg.properties.primaryPayRateEffectiveDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priorLastName"]) -> MetaOapg.properties.priorLastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateCode"]) -> MetaOapg.properties.rateCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratePer"]) -> MetaOapg.properties.ratePer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviewerCo"]) -> MetaOapg.properties.reviewerCo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reviewerId"]) -> MetaOapg.properties.reviewerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salary"]) -> MetaOapg.properties.salary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["salutation"]) -> MetaOapg.properties.salutation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sex"]) -> MetaOapg.properties.sex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shift"]) -> MetaOapg.properties.shift: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sitwExempt"]) -> MetaOapg.properties.sitwExempt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sitwExemptNotes"]) -> MetaOapg.properties.sitwExemptNotes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sitwExemptReason"]) -> MetaOapg.properties.sitwExemptReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["smoker"]) -> MetaOapg.properties.smoker: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssExempt"]) -> MetaOapg.properties.ssExempt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssExemptNotes"]) -> MetaOapg.properties.ssExemptNotes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssExemptReason"]) -> MetaOapg.properties.ssExemptReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssn"]) -> MetaOapg.properties.ssn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statutory"]) -> MetaOapg.properties.statutory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suffix"]) -> MetaOapg.properties.suffix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suiExempt"]) -> MetaOapg.properties.suiExempt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suiExemptNotes"]) -> MetaOapg.properties.suiExemptNotes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suiExemptReason"]) -> MetaOapg.properties.suiExemptReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suiState"]) -> MetaOapg.properties.suiState: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisorCo"]) -> MetaOapg.properties.supervisorCo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisorID"]) -> MetaOapg.properties.supervisorID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxDistributionCode1099R"]) -> MetaOapg.properties.taxDistributionCode1099R: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxForm"]) -> MetaOapg.properties.taxForm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tipped"]) -> MetaOapg.properties.tipped: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unionCode"]) -> MetaOapg.properties.unionCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unionDate"]) -> MetaOapg.properties.unionDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unionDues"]) -> MetaOapg.properties.unionDues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unionInitFees"]) -> MetaOapg.properties.unionInitFees: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unionPosition"]) -> MetaOapg.properties.unionPosition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["veteran"]) -> MetaOapg.properties.veteran: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["waliExempt"]) -> MetaOapg.properties.waliExempt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["waliExemptNotes"]) -> MetaOapg.properties.waliExemptNotes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["waliExemptReason"]) -> MetaOapg.properties.waliExemptReason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workAddress1"]) -> MetaOapg.properties.workAddress1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workAddress2"]) -> MetaOapg.properties.workAddress2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workCity"]) -> MetaOapg.properties.workCity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workCountry"]) -> MetaOapg.properties.workCountry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workCounty"]) -> MetaOapg.properties.workCounty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workEmailAddress"]) -> MetaOapg.properties.workEmailAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workersComp"]) -> MetaOapg.properties.workersComp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workExt"]) -> MetaOapg.properties.workExt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workLocation"]) -> MetaOapg.properties.workLocation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workMailStop"]) -> MetaOapg.properties.workMailStop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workMobilePhone"]) -> MetaOapg.properties.workMobilePhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workPager"]) -> MetaOapg.properties.workPager: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workPhone"]) -> MetaOapg.properties.workPhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workState"]) -> MetaOapg.properties.workState: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workZip"]) -> MetaOapg.properties.workZip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zip"]) -> MetaOapg.properties.zip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["syncWebTimeRecord"]) -> MetaOapg.properties.syncWebTimeRecord: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["newBenefitClassSetup"]) -> MetaOapg.properties.newBenefitClassSetup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["newMainDirectDeposit"]) -> MetaOapg.properties.newMainDirectDeposit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["newAdditionalDirectDeposit"]) -> MetaOapg.properties.newAdditionalDirectDeposit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["newFedTax"]) -> MetaOapg.properties.newFedTax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["newLocalTax"]) -> MetaOapg.properties.newLocalTax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["newStateTax"]) -> MetaOapg.properties.newStateTax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["newWorkEligibility"]) -> MetaOapg.properties.newWorkEligibility: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["companyNumber", "title", "address1", "address2", "adjSeniorityDate", "annualSalary", "autoGenerateEmployeeId", "autoPay", "autoPayType", "baseRate", "birthDate", "city", "clockBadge", "costCenter1", "costCenter2", "costCenter3", "country", "county", "defaultHours", "disability", "eligibleForRehire", "employee943", "employeeId", "employeeStatus", "employmentType", "equalEmploymentOpportunityClass", "ethnicity", "firstName", "fitwExempt", "fitwExemptNotes", "fitwExemptReason", "futaExempt", "futaExemptNotes", "futaExemptReason", "hireDate", "homePhone", "isSupervisorReviewer", "lastName", "maritalStatus", "medExempt", "medExemptNotes", "medExemptReason", "middleName", "minimumWageExempt", "nickname", "overrideTitle", "overtimeExempt", "payFrequency", "payGrade", "payGroup", "payRateNote", "pension", "personalEmailAddress", "personalMobilePhone", "positionCode", "primaryPayRateEffectiveDate", "priorLastName", "rateCode", "ratePer", "reviewerCo", "reviewerId", "salary", "salutation", "sex", "shift", "sitwExempt", "sitwExemptNotes", "sitwExemptReason", "smoker", "ssExempt", "ssExemptNotes", "ssExemptReason", "ssn", "state", "statutory", "suffix", "suiExempt", "suiExemptNotes", "suiExemptReason", "suiState", "supervisorCo", "supervisorID", "taxDistributionCode1099R", "taxForm", "tipped", "unionCode", "unionDate", "unionDues", "unionInitFees", "unionPosition", "veteran", "waliExempt", "waliExemptNotes", "waliExemptReason", "workAddress1", "workAddress2", "workCity", "workCountry", "workCounty", "workEmailAddress", "workersComp", "workExt", "workLocation", "workMailStop", "workMobilePhone", "workPager", "workPhone", "workState", "workZip", "zip", "syncWebTimeRecord", "newBenefitClassSetup", "newMainDirectDeposit", "newAdditionalDirectDeposit", "newFedTax", "newLocalTax", "newStateTax", "newWorkEligibility", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyNumber"]) -> MetaOapg.properties.companyNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address1"]) -> typing.Union[MetaOapg.properties.address1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address2"]) -> typing.Union[MetaOapg.properties.address2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["adjSeniorityDate"]) -> typing.Union[MetaOapg.properties.adjSeniorityDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annualSalary"]) -> typing.Union[MetaOapg.properties.annualSalary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["autoGenerateEmployeeId"]) -> typing.Union[MetaOapg.properties.autoGenerateEmployeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["autoPay"]) -> typing.Union[MetaOapg.properties.autoPay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["autoPayType"]) -> typing.Union[MetaOapg.properties.autoPayType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["baseRate"]) -> typing.Union[MetaOapg.properties.baseRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["birthDate"]) -> typing.Union[MetaOapg.properties.birthDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clockBadge"]) -> typing.Union[MetaOapg.properties.clockBadge, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costCenter1"]) -> typing.Union[MetaOapg.properties.costCenter1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costCenter2"]) -> typing.Union[MetaOapg.properties.costCenter2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costCenter3"]) -> typing.Union[MetaOapg.properties.costCenter3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["county"]) -> typing.Union[MetaOapg.properties.county, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultHours"]) -> typing.Union[MetaOapg.properties.defaultHours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disability"]) -> typing.Union[MetaOapg.properties.disability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eligibleForRehire"]) -> typing.Union[MetaOapg.properties.eligibleForRehire, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee943"]) -> typing.Union[MetaOapg.properties.employee943, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeId"]) -> typing.Union[MetaOapg.properties.employeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeStatus"]) -> typing.Union[MetaOapg.properties.employeeStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employmentType"]) -> typing.Union[MetaOapg.properties.employmentType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["equalEmploymentOpportunityClass"]) -> typing.Union[MetaOapg.properties.equalEmploymentOpportunityClass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ethnicity"]) -> typing.Union[MetaOapg.properties.ethnicity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fitwExempt"]) -> typing.Union[MetaOapg.properties.fitwExempt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fitwExemptNotes"]) -> typing.Union[MetaOapg.properties.fitwExemptNotes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fitwExemptReason"]) -> typing.Union[MetaOapg.properties.fitwExemptReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["futaExempt"]) -> typing.Union[MetaOapg.properties.futaExempt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["futaExemptNotes"]) -> typing.Union[MetaOapg.properties.futaExemptNotes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["futaExemptReason"]) -> typing.Union[MetaOapg.properties.futaExemptReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hireDate"]) -> typing.Union[MetaOapg.properties.hireDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["homePhone"]) -> typing.Union[MetaOapg.properties.homePhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSupervisorReviewer"]) -> typing.Union[MetaOapg.properties.isSupervisorReviewer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maritalStatus"]) -> typing.Union[MetaOapg.properties.maritalStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["medExempt"]) -> typing.Union[MetaOapg.properties.medExempt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["medExemptNotes"]) -> typing.Union[MetaOapg.properties.medExemptNotes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["medExemptReason"]) -> typing.Union[MetaOapg.properties.medExemptReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["middleName"]) -> typing.Union[MetaOapg.properties.middleName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimumWageExempt"]) -> typing.Union[MetaOapg.properties.minimumWageExempt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nickname"]) -> typing.Union[MetaOapg.properties.nickname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overrideTitle"]) -> typing.Union[MetaOapg.properties.overrideTitle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overtimeExempt"]) -> typing.Union[MetaOapg.properties.overtimeExempt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payFrequency"]) -> typing.Union[MetaOapg.properties.payFrequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payGrade"]) -> typing.Union[MetaOapg.properties.payGrade, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payGroup"]) -> typing.Union[MetaOapg.properties.payGroup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payRateNote"]) -> typing.Union[MetaOapg.properties.payRateNote, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pension"]) -> typing.Union[MetaOapg.properties.pension, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personalEmailAddress"]) -> typing.Union[MetaOapg.properties.personalEmailAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personalMobilePhone"]) -> typing.Union[MetaOapg.properties.personalMobilePhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["positionCode"]) -> typing.Union[MetaOapg.properties.positionCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryPayRateEffectiveDate"]) -> typing.Union[MetaOapg.properties.primaryPayRateEffectiveDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priorLastName"]) -> typing.Union[MetaOapg.properties.priorLastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateCode"]) -> typing.Union[MetaOapg.properties.rateCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratePer"]) -> typing.Union[MetaOapg.properties.ratePer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviewerCo"]) -> typing.Union[MetaOapg.properties.reviewerCo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reviewerId"]) -> typing.Union[MetaOapg.properties.reviewerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salary"]) -> typing.Union[MetaOapg.properties.salary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["salutation"]) -> typing.Union[MetaOapg.properties.salutation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sex"]) -> typing.Union[MetaOapg.properties.sex, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shift"]) -> typing.Union[MetaOapg.properties.shift, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sitwExempt"]) -> typing.Union[MetaOapg.properties.sitwExempt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sitwExemptNotes"]) -> typing.Union[MetaOapg.properties.sitwExemptNotes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sitwExemptReason"]) -> typing.Union[MetaOapg.properties.sitwExemptReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["smoker"]) -> typing.Union[MetaOapg.properties.smoker, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssExempt"]) -> typing.Union[MetaOapg.properties.ssExempt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssExemptNotes"]) -> typing.Union[MetaOapg.properties.ssExemptNotes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssExemptReason"]) -> typing.Union[MetaOapg.properties.ssExemptReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssn"]) -> typing.Union[MetaOapg.properties.ssn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statutory"]) -> typing.Union[MetaOapg.properties.statutory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suffix"]) -> typing.Union[MetaOapg.properties.suffix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suiExempt"]) -> typing.Union[MetaOapg.properties.suiExempt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suiExemptNotes"]) -> typing.Union[MetaOapg.properties.suiExemptNotes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suiExemptReason"]) -> typing.Union[MetaOapg.properties.suiExemptReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suiState"]) -> typing.Union[MetaOapg.properties.suiState, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisorCo"]) -> typing.Union[MetaOapg.properties.supervisorCo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisorID"]) -> typing.Union[MetaOapg.properties.supervisorID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxDistributionCode1099R"]) -> typing.Union[MetaOapg.properties.taxDistributionCode1099R, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxForm"]) -> typing.Union[MetaOapg.properties.taxForm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tipped"]) -> typing.Union[MetaOapg.properties.tipped, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unionCode"]) -> typing.Union[MetaOapg.properties.unionCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unionDate"]) -> typing.Union[MetaOapg.properties.unionDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unionDues"]) -> typing.Union[MetaOapg.properties.unionDues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unionInitFees"]) -> typing.Union[MetaOapg.properties.unionInitFees, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unionPosition"]) -> typing.Union[MetaOapg.properties.unionPosition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["veteran"]) -> typing.Union[MetaOapg.properties.veteran, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["waliExempt"]) -> typing.Union[MetaOapg.properties.waliExempt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["waliExemptNotes"]) -> typing.Union[MetaOapg.properties.waliExemptNotes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["waliExemptReason"]) -> typing.Union[MetaOapg.properties.waliExemptReason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workAddress1"]) -> typing.Union[MetaOapg.properties.workAddress1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workAddress2"]) -> typing.Union[MetaOapg.properties.workAddress2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workCity"]) -> typing.Union[MetaOapg.properties.workCity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workCountry"]) -> typing.Union[MetaOapg.properties.workCountry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workCounty"]) -> typing.Union[MetaOapg.properties.workCounty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workEmailAddress"]) -> typing.Union[MetaOapg.properties.workEmailAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workersComp"]) -> typing.Union[MetaOapg.properties.workersComp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workExt"]) -> typing.Union[MetaOapg.properties.workExt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workLocation"]) -> typing.Union[MetaOapg.properties.workLocation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workMailStop"]) -> typing.Union[MetaOapg.properties.workMailStop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workMobilePhone"]) -> typing.Union[MetaOapg.properties.workMobilePhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workPager"]) -> typing.Union[MetaOapg.properties.workPager, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workPhone"]) -> typing.Union[MetaOapg.properties.workPhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workState"]) -> typing.Union[MetaOapg.properties.workState, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workZip"]) -> typing.Union[MetaOapg.properties.workZip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zip"]) -> typing.Union[MetaOapg.properties.zip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["syncWebTimeRecord"]) -> typing.Union[MetaOapg.properties.syncWebTimeRecord, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["newBenefitClassSetup"]) -> typing.Union[MetaOapg.properties.newBenefitClassSetup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["newMainDirectDeposit"]) -> typing.Union[MetaOapg.properties.newMainDirectDeposit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["newAdditionalDirectDeposit"]) -> typing.Union[MetaOapg.properties.newAdditionalDirectDeposit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["newFedTax"]) -> typing.Union[MetaOapg.properties.newFedTax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["newLocalTax"]) -> typing.Union[MetaOapg.properties.newLocalTax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["newStateTax"]) -> typing.Union[MetaOapg.properties.newStateTax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["newWorkEligibility"]) -> typing.Union[MetaOapg.properties.newWorkEligibility, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["companyNumber", "title", "address1", "address2", "adjSeniorityDate", "annualSalary", "autoGenerateEmployeeId", "autoPay", "autoPayType", "baseRate", "birthDate", "city", "clockBadge", "costCenter1", "costCenter2", "costCenter3", "country", "county", "defaultHours", "disability", "eligibleForRehire", "employee943", "employeeId", "employeeStatus", "employmentType", "equalEmploymentOpportunityClass", "ethnicity", "firstName", "fitwExempt", "fitwExemptNotes", "fitwExemptReason", "futaExempt", "futaExemptNotes", "futaExemptReason", "hireDate", "homePhone", "isSupervisorReviewer", "lastName", "maritalStatus", "medExempt", "medExemptNotes", "medExemptReason", "middleName", "minimumWageExempt", "nickname", "overrideTitle", "overtimeExempt", "payFrequency", "payGrade", "payGroup", "payRateNote", "pension", "personalEmailAddress", "personalMobilePhone", "positionCode", "primaryPayRateEffectiveDate", "priorLastName", "rateCode", "ratePer", "reviewerCo", "reviewerId", "salary", "salutation", "sex", "shift", "sitwExempt", "sitwExemptNotes", "sitwExemptReason", "smoker", "ssExempt", "ssExemptNotes", "ssExemptReason", "ssn", "state", "statutory", "suffix", "suiExempt", "suiExemptNotes", "suiExemptReason", "suiState", "supervisorCo", "supervisorID", "taxDistributionCode1099R", "taxForm", "tipped", "unionCode", "unionDate", "unionDues", "unionInitFees", "unionPosition", "veteran", "waliExempt", "waliExemptNotes", "waliExemptReason", "workAddress1", "workAddress2", "workCity", "workCountry", "workCounty", "workEmailAddress", "workersComp", "workExt", "workLocation", "workMailStop", "workMobilePhone", "workPager", "workPhone", "workState", "workZip", "zip", "syncWebTimeRecord", "newBenefitClassSetup", "newMainDirectDeposit", "newAdditionalDirectDeposit", "newFedTax", "newLocalTax", "newStateTax", "newWorkEligibility", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        companyNumber: typing.Union[MetaOapg.properties.companyNumber, str, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        address1: typing.Union[MetaOapg.properties.address1, str, schemas.Unset] = schemas.unset,
        address2: typing.Union[MetaOapg.properties.address2, str, schemas.Unset] = schemas.unset,
        adjSeniorityDate: typing.Union[MetaOapg.properties.adjSeniorityDate, str, date, schemas.Unset] = schemas.unset,
        annualSalary: typing.Union[MetaOapg.properties.annualSalary, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        autoGenerateEmployeeId: typing.Union[MetaOapg.properties.autoGenerateEmployeeId, bool, schemas.Unset] = schemas.unset,
        autoPay: typing.Union[MetaOapg.properties.autoPay, bool, schemas.Unset] = schemas.unset,
        autoPayType: typing.Union[MetaOapg.properties.autoPayType, str, schemas.Unset] = schemas.unset,
        baseRate: typing.Union[MetaOapg.properties.baseRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        birthDate: typing.Union[MetaOapg.properties.birthDate, str, date, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        clockBadge: typing.Union[MetaOapg.properties.clockBadge, str, schemas.Unset] = schemas.unset,
        costCenter1: typing.Union[MetaOapg.properties.costCenter1, str, schemas.Unset] = schemas.unset,
        costCenter2: typing.Union[MetaOapg.properties.costCenter2, str, schemas.Unset] = schemas.unset,
        costCenter3: typing.Union[MetaOapg.properties.costCenter3, str, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        county: typing.Union[MetaOapg.properties.county, str, schemas.Unset] = schemas.unset,
        defaultHours: typing.Union[MetaOapg.properties.defaultHours, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        disability: typing.Union[MetaOapg.properties.disability, bool, schemas.Unset] = schemas.unset,
        eligibleForRehire: typing.Union[MetaOapg.properties.eligibleForRehire, bool, schemas.Unset] = schemas.unset,
        employee943: typing.Union[MetaOapg.properties.employee943, bool, schemas.Unset] = schemas.unset,
        employeeId: typing.Union[MetaOapg.properties.employeeId, str, schemas.Unset] = schemas.unset,
        employeeStatus: typing.Union[MetaOapg.properties.employeeStatus, str, schemas.Unset] = schemas.unset,
        employmentType: typing.Union[MetaOapg.properties.employmentType, str, schemas.Unset] = schemas.unset,
        equalEmploymentOpportunityClass: typing.Union[MetaOapg.properties.equalEmploymentOpportunityClass, str, schemas.Unset] = schemas.unset,
        ethnicity: typing.Union[MetaOapg.properties.ethnicity, str, schemas.Unset] = schemas.unset,
        firstName: typing.Union[MetaOapg.properties.firstName, str, schemas.Unset] = schemas.unset,
        fitwExempt: typing.Union[MetaOapg.properties.fitwExempt, bool, schemas.Unset] = schemas.unset,
        fitwExemptNotes: typing.Union[MetaOapg.properties.fitwExemptNotes, str, schemas.Unset] = schemas.unset,
        fitwExemptReason: typing.Union[MetaOapg.properties.fitwExemptReason, str, schemas.Unset] = schemas.unset,
        futaExempt: typing.Union[MetaOapg.properties.futaExempt, bool, schemas.Unset] = schemas.unset,
        futaExemptNotes: typing.Union[MetaOapg.properties.futaExemptNotes, str, schemas.Unset] = schemas.unset,
        futaExemptReason: typing.Union[MetaOapg.properties.futaExemptReason, str, schemas.Unset] = schemas.unset,
        hireDate: typing.Union[MetaOapg.properties.hireDate, str, date, schemas.Unset] = schemas.unset,
        homePhone: typing.Union[MetaOapg.properties.homePhone, str, schemas.Unset] = schemas.unset,
        isSupervisorReviewer: typing.Union[MetaOapg.properties.isSupervisorReviewer, bool, schemas.Unset] = schemas.unset,
        lastName: typing.Union[MetaOapg.properties.lastName, str, schemas.Unset] = schemas.unset,
        maritalStatus: typing.Union[MetaOapg.properties.maritalStatus, str, schemas.Unset] = schemas.unset,
        medExempt: typing.Union[MetaOapg.properties.medExempt, bool, schemas.Unset] = schemas.unset,
        medExemptNotes: typing.Union[MetaOapg.properties.medExemptNotes, str, schemas.Unset] = schemas.unset,
        medExemptReason: typing.Union[MetaOapg.properties.medExemptReason, str, schemas.Unset] = schemas.unset,
        middleName: typing.Union[MetaOapg.properties.middleName, str, schemas.Unset] = schemas.unset,
        minimumWageExempt: typing.Union[MetaOapg.properties.minimumWageExempt, bool, schemas.Unset] = schemas.unset,
        nickname: typing.Union[MetaOapg.properties.nickname, str, schemas.Unset] = schemas.unset,
        overrideTitle: typing.Union[MetaOapg.properties.overrideTitle, bool, schemas.Unset] = schemas.unset,
        overtimeExempt: typing.Union[MetaOapg.properties.overtimeExempt, bool, schemas.Unset] = schemas.unset,
        payFrequency: typing.Union[MetaOapg.properties.payFrequency, str, schemas.Unset] = schemas.unset,
        payGrade: typing.Union[MetaOapg.properties.payGrade, str, schemas.Unset] = schemas.unset,
        payGroup: typing.Union[MetaOapg.properties.payGroup, str, schemas.Unset] = schemas.unset,
        payRateNote: typing.Union[MetaOapg.properties.payRateNote, str, schemas.Unset] = schemas.unset,
        pension: typing.Union[MetaOapg.properties.pension, bool, schemas.Unset] = schemas.unset,
        personalEmailAddress: typing.Union[MetaOapg.properties.personalEmailAddress, str, schemas.Unset] = schemas.unset,
        personalMobilePhone: typing.Union[MetaOapg.properties.personalMobilePhone, str, schemas.Unset] = schemas.unset,
        positionCode: typing.Union[MetaOapg.properties.positionCode, str, schemas.Unset] = schemas.unset,
        primaryPayRateEffectiveDate: typing.Union[MetaOapg.properties.primaryPayRateEffectiveDate, str, date, schemas.Unset] = schemas.unset,
        priorLastName: typing.Union[MetaOapg.properties.priorLastName, str, schemas.Unset] = schemas.unset,
        rateCode: typing.Union[MetaOapg.properties.rateCode, str, schemas.Unset] = schemas.unset,
        ratePer: typing.Union[MetaOapg.properties.ratePer, str, schemas.Unset] = schemas.unset,
        reviewerCo: typing.Union[MetaOapg.properties.reviewerCo, str, schemas.Unset] = schemas.unset,
        reviewerId: typing.Union[MetaOapg.properties.reviewerId, str, schemas.Unset] = schemas.unset,
        salary: typing.Union[MetaOapg.properties.salary, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        salutation: typing.Union[MetaOapg.properties.salutation, str, schemas.Unset] = schemas.unset,
        sex: typing.Union[MetaOapg.properties.sex, str, schemas.Unset] = schemas.unset,
        shift: typing.Union[MetaOapg.properties.shift, str, schemas.Unset] = schemas.unset,
        sitwExempt: typing.Union[MetaOapg.properties.sitwExempt, bool, schemas.Unset] = schemas.unset,
        sitwExemptNotes: typing.Union[MetaOapg.properties.sitwExemptNotes, str, schemas.Unset] = schemas.unset,
        sitwExemptReason: typing.Union[MetaOapg.properties.sitwExemptReason, str, schemas.Unset] = schemas.unset,
        smoker: typing.Union[MetaOapg.properties.smoker, bool, schemas.Unset] = schemas.unset,
        ssExempt: typing.Union[MetaOapg.properties.ssExempt, bool, schemas.Unset] = schemas.unset,
        ssExemptNotes: typing.Union[MetaOapg.properties.ssExemptNotes, str, schemas.Unset] = schemas.unset,
        ssExemptReason: typing.Union[MetaOapg.properties.ssExemptReason, str, schemas.Unset] = schemas.unset,
        ssn: typing.Union[MetaOapg.properties.ssn, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        statutory: typing.Union[MetaOapg.properties.statutory, bool, schemas.Unset] = schemas.unset,
        suffix: typing.Union[MetaOapg.properties.suffix, str, schemas.Unset] = schemas.unset,
        suiExempt: typing.Union[MetaOapg.properties.suiExempt, bool, schemas.Unset] = schemas.unset,
        suiExemptNotes: typing.Union[MetaOapg.properties.suiExemptNotes, str, schemas.Unset] = schemas.unset,
        suiExemptReason: typing.Union[MetaOapg.properties.suiExemptReason, str, schemas.Unset] = schemas.unset,
        suiState: typing.Union[MetaOapg.properties.suiState, str, schemas.Unset] = schemas.unset,
        supervisorCo: typing.Union[MetaOapg.properties.supervisorCo, str, schemas.Unset] = schemas.unset,
        supervisorID: typing.Union[MetaOapg.properties.supervisorID, str, schemas.Unset] = schemas.unset,
        taxDistributionCode1099R: typing.Union[MetaOapg.properties.taxDistributionCode1099R, str, schemas.Unset] = schemas.unset,
        taxForm: typing.Union[MetaOapg.properties.taxForm, str, schemas.Unset] = schemas.unset,
        tipped: typing.Union[MetaOapg.properties.tipped, str, schemas.Unset] = schemas.unset,
        unionCode: typing.Union[MetaOapg.properties.unionCode, str, schemas.Unset] = schemas.unset,
        unionDate: typing.Union[MetaOapg.properties.unionDate, str, date, schemas.Unset] = schemas.unset,
        unionDues: typing.Union[MetaOapg.properties.unionDues, bool, schemas.Unset] = schemas.unset,
        unionInitFees: typing.Union[MetaOapg.properties.unionInitFees, bool, schemas.Unset] = schemas.unset,
        unionPosition: typing.Union[MetaOapg.properties.unionPosition, str, schemas.Unset] = schemas.unset,
        veteran: typing.Union[MetaOapg.properties.veteran, bool, schemas.Unset] = schemas.unset,
        waliExempt: typing.Union[MetaOapg.properties.waliExempt, bool, schemas.Unset] = schemas.unset,
        waliExemptNotes: typing.Union[MetaOapg.properties.waliExemptNotes, str, schemas.Unset] = schemas.unset,
        waliExemptReason: typing.Union[MetaOapg.properties.waliExemptReason, str, schemas.Unset] = schemas.unset,
        workAddress1: typing.Union[MetaOapg.properties.workAddress1, str, schemas.Unset] = schemas.unset,
        workAddress2: typing.Union[MetaOapg.properties.workAddress2, str, schemas.Unset] = schemas.unset,
        workCity: typing.Union[MetaOapg.properties.workCity, str, schemas.Unset] = schemas.unset,
        workCountry: typing.Union[MetaOapg.properties.workCountry, str, schemas.Unset] = schemas.unset,
        workCounty: typing.Union[MetaOapg.properties.workCounty, str, schemas.Unset] = schemas.unset,
        workEmailAddress: typing.Union[MetaOapg.properties.workEmailAddress, str, schemas.Unset] = schemas.unset,
        workersComp: typing.Union[MetaOapg.properties.workersComp, str, schemas.Unset] = schemas.unset,
        workExt: typing.Union[MetaOapg.properties.workExt, str, schemas.Unset] = schemas.unset,
        workLocation: typing.Union[MetaOapg.properties.workLocation, str, schemas.Unset] = schemas.unset,
        workMailStop: typing.Union[MetaOapg.properties.workMailStop, str, schemas.Unset] = schemas.unset,
        workMobilePhone: typing.Union[MetaOapg.properties.workMobilePhone, str, schemas.Unset] = schemas.unset,
        workPager: typing.Union[MetaOapg.properties.workPager, str, schemas.Unset] = schemas.unset,
        workPhone: typing.Union[MetaOapg.properties.workPhone, str, schemas.Unset] = schemas.unset,
        workState: typing.Union[MetaOapg.properties.workState, str, schemas.Unset] = schemas.unset,
        workZip: typing.Union[MetaOapg.properties.workZip, str, schemas.Unset] = schemas.unset,
        zip: typing.Union[MetaOapg.properties.zip, str, schemas.Unset] = schemas.unset,
        syncWebTimeRecord: typing.Union[MetaOapg.properties.syncWebTimeRecord, bool, schemas.Unset] = schemas.unset,
        newBenefitClassSetup: typing.Union[MetaOapg.properties.newBenefitClassSetup, list, tuple, schemas.Unset] = schemas.unset,
        newMainDirectDeposit: typing.Union[MetaOapg.properties.newMainDirectDeposit, list, tuple, schemas.Unset] = schemas.unset,
        newAdditionalDirectDeposit: typing.Union[MetaOapg.properties.newAdditionalDirectDeposit, list, tuple, schemas.Unset] = schemas.unset,
        newFedTax: typing.Union[MetaOapg.properties.newFedTax, list, tuple, schemas.Unset] = schemas.unset,
        newLocalTax: typing.Union[MetaOapg.properties.newLocalTax, list, tuple, schemas.Unset] = schemas.unset,
        newStateTax: typing.Union[MetaOapg.properties.newStateTax, list, tuple, schemas.Unset] = schemas.unset,
        newWorkEligibility: typing.Union[MetaOapg.properties.newWorkEligibility, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NewEmployee':
        return super().__new__(
            cls,
            *args,
            companyNumber=companyNumber,
            title=title,
            address1=address1,
            address2=address2,
            adjSeniorityDate=adjSeniorityDate,
            annualSalary=annualSalary,
            autoGenerateEmployeeId=autoGenerateEmployeeId,
            autoPay=autoPay,
            autoPayType=autoPayType,
            baseRate=baseRate,
            birthDate=birthDate,
            city=city,
            clockBadge=clockBadge,
            costCenter1=costCenter1,
            costCenter2=costCenter2,
            costCenter3=costCenter3,
            country=country,
            county=county,
            defaultHours=defaultHours,
            disability=disability,
            eligibleForRehire=eligibleForRehire,
            employee943=employee943,
            employeeId=employeeId,
            employeeStatus=employeeStatus,
            employmentType=employmentType,
            equalEmploymentOpportunityClass=equalEmploymentOpportunityClass,
            ethnicity=ethnicity,
            firstName=firstName,
            fitwExempt=fitwExempt,
            fitwExemptNotes=fitwExemptNotes,
            fitwExemptReason=fitwExemptReason,
            futaExempt=futaExempt,
            futaExemptNotes=futaExemptNotes,
            futaExemptReason=futaExemptReason,
            hireDate=hireDate,
            homePhone=homePhone,
            isSupervisorReviewer=isSupervisorReviewer,
            lastName=lastName,
            maritalStatus=maritalStatus,
            medExempt=medExempt,
            medExemptNotes=medExemptNotes,
            medExemptReason=medExemptReason,
            middleName=middleName,
            minimumWageExempt=minimumWageExempt,
            nickname=nickname,
            overrideTitle=overrideTitle,
            overtimeExempt=overtimeExempt,
            payFrequency=payFrequency,
            payGrade=payGrade,
            payGroup=payGroup,
            payRateNote=payRateNote,
            pension=pension,
            personalEmailAddress=personalEmailAddress,
            personalMobilePhone=personalMobilePhone,
            positionCode=positionCode,
            primaryPayRateEffectiveDate=primaryPayRateEffectiveDate,
            priorLastName=priorLastName,
            rateCode=rateCode,
            ratePer=ratePer,
            reviewerCo=reviewerCo,
            reviewerId=reviewerId,
            salary=salary,
            salutation=salutation,
            sex=sex,
            shift=shift,
            sitwExempt=sitwExempt,
            sitwExemptNotes=sitwExemptNotes,
            sitwExemptReason=sitwExemptReason,
            smoker=smoker,
            ssExempt=ssExempt,
            ssExemptNotes=ssExemptNotes,
            ssExemptReason=ssExemptReason,
            ssn=ssn,
            state=state,
            statutory=statutory,
            suffix=suffix,
            suiExempt=suiExempt,
            suiExemptNotes=suiExemptNotes,
            suiExemptReason=suiExemptReason,
            suiState=suiState,
            supervisorCo=supervisorCo,
            supervisorID=supervisorID,
            taxDistributionCode1099R=taxDistributionCode1099R,
            taxForm=taxForm,
            tipped=tipped,
            unionCode=unionCode,
            unionDate=unionDate,
            unionDues=unionDues,
            unionInitFees=unionInitFees,
            unionPosition=unionPosition,
            veteran=veteran,
            waliExempt=waliExempt,
            waliExemptNotes=waliExemptNotes,
            waliExemptReason=waliExemptReason,
            workAddress1=workAddress1,
            workAddress2=workAddress2,
            workCity=workCity,
            workCountry=workCountry,
            workCounty=workCounty,
            workEmailAddress=workEmailAddress,
            workersComp=workersComp,
            workExt=workExt,
            workLocation=workLocation,
            workMailStop=workMailStop,
            workMobilePhone=workMobilePhone,
            workPager=workPager,
            workPhone=workPhone,
            workState=workState,
            workZip=workZip,
            zip=zip,
            syncWebTimeRecord=syncWebTimeRecord,
            newBenefitClassSetup=newBenefitClassSetup,
            newMainDirectDeposit=newMainDirectDeposit,
            newAdditionalDirectDeposit=newAdditionalDirectDeposit,
            newFedTax=newFedTax,
            newLocalTax=newLocalTax,
            newStateTax=newStateTax,
            newWorkEligibility=newWorkEligibility,
            _configuration=_configuration,
            **kwargs,
        )

from paylocity_python_sdk.model.new_additional_direct_deposit import NewAdditionalDirectDeposit
from paylocity_python_sdk.model.new_benefit_class_setup import NewBenefitClassSetup
from paylocity_python_sdk.model.new_fed_tax import NewFedTax
from paylocity_python_sdk.model.new_local_tax import NewLocalTax
from paylocity_python_sdk.model.new_main_direct_deposit import NewMainDirectDeposit
from paylocity_python_sdk.model.new_state_tax import NewStateTax
from paylocity_python_sdk.model.new_work_eligibility import NewWorkEligibility
