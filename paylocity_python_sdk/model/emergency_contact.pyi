# coding: utf-8

"""
    WebLink API

    For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

    The version of the OpenAPI document: v2
    Contact: webservices@paylocity.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paylocity_python_sdk import schemas  # noqa: F401


class EmergencyContact(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The emergency contact model
    """


    class MetaOapg:
        required = {
            "firstName",
            "lastName",
        }
        
        class properties:
            firstName = schemas.DictSchema
            lastName = schemas.DictSchema
            address1 = schemas.DictSchema
            address2 = schemas.DictSchema
            city = schemas.DictSchema
            country = schemas.DictSchema
            county = schemas.DictSchema
            email = schemas.DictSchema
            homePhone = schemas.DictSchema
            mobilePhone = schemas.DictSchema
            notes = schemas.DictSchema
            pager = schemas.DictSchema
            primaryPhone = schemas.DictSchema
            priority = schemas.DictSchema
            relationship = schemas.DictSchema
            state = schemas.DictSchema
            syncEmployeeInfo = schemas.BoolSchema
            workExtension = schemas.DictSchema
            workPhone = schemas.DictSchema
            zip = schemas.DictSchema
            __annotations__ = {
                "firstName": firstName,
                "lastName": lastName,
                "address1": address1,
                "address2": address2,
                "city": city,
                "country": country,
                "county": county,
                "email": email,
                "homePhone": homePhone,
                "mobilePhone": mobilePhone,
                "notes": notes,
                "pager": pager,
                "primaryPhone": primaryPhone,
                "priority": priority,
                "relationship": relationship,
                "state": state,
                "syncEmployeeInfo": syncEmployeeInfo,
                "workExtension": workExtension,
                "workPhone": workPhone,
                "zip": zip,
            }
    
    firstName: MetaOapg.properties.firstName
    lastName: MetaOapg.properties.lastName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address1"]) -> MetaOapg.properties.address1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address2"]) -> MetaOapg.properties.address2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["county"]) -> MetaOapg.properties.county: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["homePhone"]) -> MetaOapg.properties.homePhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mobilePhone"]) -> MetaOapg.properties.mobilePhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notes"]) -> MetaOapg.properties.notes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pager"]) -> MetaOapg.properties.pager: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryPhone"]) -> MetaOapg.properties.primaryPhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priority"]) -> MetaOapg.properties.priority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relationship"]) -> MetaOapg.properties.relationship: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["syncEmployeeInfo"]) -> MetaOapg.properties.syncEmployeeInfo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workExtension"]) -> MetaOapg.properties.workExtension: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workPhone"]) -> MetaOapg.properties.workPhone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zip"]) -> MetaOapg.properties.zip: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["firstName", "lastName", "address1", "address2", "city", "country", "county", "email", "homePhone", "mobilePhone", "notes", "pager", "primaryPhone", "priority", "relationship", "state", "syncEmployeeInfo", "workExtension", "workPhone", "zip", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address1"]) -> typing.Union[MetaOapg.properties.address1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address2"]) -> typing.Union[MetaOapg.properties.address2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["county"]) -> typing.Union[MetaOapg.properties.county, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["homePhone"]) -> typing.Union[MetaOapg.properties.homePhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mobilePhone"]) -> typing.Union[MetaOapg.properties.mobilePhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notes"]) -> typing.Union[MetaOapg.properties.notes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pager"]) -> typing.Union[MetaOapg.properties.pager, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryPhone"]) -> typing.Union[MetaOapg.properties.primaryPhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> typing.Union[MetaOapg.properties.priority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relationship"]) -> typing.Union[MetaOapg.properties.relationship, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["syncEmployeeInfo"]) -> typing.Union[MetaOapg.properties.syncEmployeeInfo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workExtension"]) -> typing.Union[MetaOapg.properties.workExtension, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workPhone"]) -> typing.Union[MetaOapg.properties.workPhone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zip"]) -> typing.Union[MetaOapg.properties.zip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["firstName", "lastName", "address1", "address2", "city", "country", "county", "email", "homePhone", "mobilePhone", "notes", "pager", "primaryPhone", "priority", "relationship", "state", "syncEmployeeInfo", "workExtension", "workPhone", "zip", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        firstName: typing.Union[MetaOapg.properties.firstName, dict, frozendict.frozendict, ],
        lastName: typing.Union[MetaOapg.properties.lastName, dict, frozendict.frozendict, ],
        address1: typing.Union[MetaOapg.properties.address1, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        address2: typing.Union[MetaOapg.properties.address2, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        county: typing.Union[MetaOapg.properties.county, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        homePhone: typing.Union[MetaOapg.properties.homePhone, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        mobilePhone: typing.Union[MetaOapg.properties.mobilePhone, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        notes: typing.Union[MetaOapg.properties.notes, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        pager: typing.Union[MetaOapg.properties.pager, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        primaryPhone: typing.Union[MetaOapg.properties.primaryPhone, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        priority: typing.Union[MetaOapg.properties.priority, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        relationship: typing.Union[MetaOapg.properties.relationship, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        syncEmployeeInfo: typing.Union[MetaOapg.properties.syncEmployeeInfo, bool, schemas.Unset] = schemas.unset,
        workExtension: typing.Union[MetaOapg.properties.workExtension, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        workPhone: typing.Union[MetaOapg.properties.workPhone, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        zip: typing.Union[MetaOapg.properties.zip, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmergencyContact':
        return super().__new__(
            cls,
            *args,
            firstName=firstName,
            lastName=lastName,
            address1=address1,
            address2=address2,
            city=city,
            country=country,
            county=county,
            email=email,
            homePhone=homePhone,
            mobilePhone=mobilePhone,
            notes=notes,
            pager=pager,
            primaryPhone=primaryPhone,
            priority=priority,
            relationship=relationship,
            state=state,
            syncEmployeeInfo=syncEmployeeInfo,
            workExtension=workExtension,
            workPhone=workPhone,
            zip=zip,
            _configuration=_configuration,
            **kwargs,
        )
