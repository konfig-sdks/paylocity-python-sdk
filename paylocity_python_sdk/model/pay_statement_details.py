# coding: utf-8

"""
    WebLink API

    For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

    The version of the OpenAPI document: v2
    Contact: webservices@paylocity.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paylocity_python_sdk import schemas  # noqa: F401


class PayStatementDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The pay statement details model
    """


    class MetaOapg:
        
        class properties:
            amount = schemas.DictSchema
            checkDate = schemas.DictSchema
            det = schemas.DictSchema
            detCode = schemas.DictSchema
            detType = schemas.DictSchema
            eligibleCompensation = schemas.DictSchema
            hours = schemas.DictSchema
            rate = schemas.DictSchema
            transactionNumber = schemas.IntSchema
            transactionType = schemas.DictSchema
            year = schemas.IntSchema
            __annotations__ = {
                "amount": amount,
                "checkDate": checkDate,
                "det": det,
                "detCode": detCode,
                "detType": detType,
                "eligibleCompensation": eligibleCompensation,
                "hours": hours,
                "rate": rate,
                "transactionNumber": transactionNumber,
                "transactionType": transactionType,
                "year": year,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checkDate"]) -> MetaOapg.properties.checkDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["det"]) -> MetaOapg.properties.det: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detCode"]) -> MetaOapg.properties.detCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detType"]) -> MetaOapg.properties.detType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eligibleCompensation"]) -> MetaOapg.properties.eligibleCompensation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hours"]) -> MetaOapg.properties.hours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rate"]) -> MetaOapg.properties.rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionNumber"]) -> MetaOapg.properties.transactionNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionType"]) -> MetaOapg.properties.transactionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["year"]) -> MetaOapg.properties.year: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount", "checkDate", "det", "detCode", "detType", "eligibleCompensation", "hours", "rate", "transactionNumber", "transactionType", "year", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checkDate"]) -> typing.Union[MetaOapg.properties.checkDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["det"]) -> typing.Union[MetaOapg.properties.det, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detCode"]) -> typing.Union[MetaOapg.properties.detCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detType"]) -> typing.Union[MetaOapg.properties.detType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eligibleCompensation"]) -> typing.Union[MetaOapg.properties.eligibleCompensation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hours"]) -> typing.Union[MetaOapg.properties.hours, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rate"]) -> typing.Union[MetaOapg.properties.rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionNumber"]) -> typing.Union[MetaOapg.properties.transactionNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionType"]) -> typing.Union[MetaOapg.properties.transactionType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["year"]) -> typing.Union[MetaOapg.properties.year, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount", "checkDate", "det", "detCode", "detType", "eligibleCompensation", "hours", "rate", "transactionNumber", "transactionType", "year", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount: typing.Union[MetaOapg.properties.amount, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        checkDate: typing.Union[MetaOapg.properties.checkDate, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        det: typing.Union[MetaOapg.properties.det, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        detCode: typing.Union[MetaOapg.properties.detCode, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        detType: typing.Union[MetaOapg.properties.detType, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        eligibleCompensation: typing.Union[MetaOapg.properties.eligibleCompensation, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        hours: typing.Union[MetaOapg.properties.hours, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        rate: typing.Union[MetaOapg.properties.rate, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        transactionNumber: typing.Union[MetaOapg.properties.transactionNumber, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        transactionType: typing.Union[MetaOapg.properties.transactionType, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        year: typing.Union[MetaOapg.properties.year, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PayStatementDetails':
        return super().__new__(
            cls,
            *args,
            amount=amount,
            checkDate=checkDate,
            det=det,
            detCode=detCode,
            detType=detType,
            eligibleCompensation=eligibleCompensation,
            hours=hours,
            rate=rate,
            transactionNumber=transactionNumber,
            transactionType=transactionType,
            year=year,
            _configuration=_configuration,
            **kwargs,
        )
