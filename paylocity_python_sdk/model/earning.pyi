# coding: utf-8

"""
    WebLink API

    For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

    The version of the OpenAPI document: v2
    Contact: webservices@paylocity.com
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paylocity_python_sdk import schemas  # noqa: F401


class Earning(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The employee earning model
    """


    class MetaOapg:
        required = {
            "startDate",
            "earningCode",
        }
        
        class properties:
            earningCode = schemas.DictSchema
            startDate = schemas.DictSchema
            agency = schemas.DictSchema
            amount = schemas.DictSchema
            annualMaximum = schemas.DictSchema
            calculationCode = schemas.DictSchema
            costCenter1 = schemas.DictSchema
            costCenter2 = schemas.DictSchema
            costCenter3 = schemas.DictSchema
            effectiveDate = schemas.DictSchema
            endDate = schemas.DictSchema
            frequency = schemas.DictSchema
            goal = schemas.DictSchema
            hoursOrUnits = schemas.DictSchema
            isSelfInsured = schemas.DictSchema
            jobCode = schemas.DictSchema
            miscellaneousInfo = schemas.DictSchema
            paidTowardsGoal = schemas.DictSchema
            payPeriodMaximum = schemas.DictSchema
            payPeriodMinimum = schemas.DictSchema
            rate = schemas.DictSchema
            rateCode = schemas.DictSchema
            __annotations__ = {
                "earningCode": earningCode,
                "startDate": startDate,
                "agency": agency,
                "amount": amount,
                "annualMaximum": annualMaximum,
                "calculationCode": calculationCode,
                "costCenter1": costCenter1,
                "costCenter2": costCenter2,
                "costCenter3": costCenter3,
                "effectiveDate": effectiveDate,
                "endDate": endDate,
                "frequency": frequency,
                "goal": goal,
                "hoursOrUnits": hoursOrUnits,
                "isSelfInsured": isSelfInsured,
                "jobCode": jobCode,
                "miscellaneousInfo": miscellaneousInfo,
                "paidTowardsGoal": paidTowardsGoal,
                "payPeriodMaximum": payPeriodMaximum,
                "payPeriodMinimum": payPeriodMinimum,
                "rate": rate,
                "rateCode": rateCode,
            }
    
    startDate: MetaOapg.properties.startDate
    earningCode: MetaOapg.properties.earningCode
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["earningCode"]) -> MetaOapg.properties.earningCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["agency"]) -> MetaOapg.properties.agency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annualMaximum"]) -> MetaOapg.properties.annualMaximum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["calculationCode"]) -> MetaOapg.properties.calculationCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costCenter1"]) -> MetaOapg.properties.costCenter1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costCenter2"]) -> MetaOapg.properties.costCenter2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["costCenter3"]) -> MetaOapg.properties.costCenter3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["effectiveDate"]) -> MetaOapg.properties.effectiveDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequency"]) -> MetaOapg.properties.frequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["goal"]) -> MetaOapg.properties.goal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hoursOrUnits"]) -> MetaOapg.properties.hoursOrUnits: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSelfInsured"]) -> MetaOapg.properties.isSelfInsured: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobCode"]) -> MetaOapg.properties.jobCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["miscellaneousInfo"]) -> MetaOapg.properties.miscellaneousInfo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paidTowardsGoal"]) -> MetaOapg.properties.paidTowardsGoal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payPeriodMaximum"]) -> MetaOapg.properties.payPeriodMaximum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payPeriodMinimum"]) -> MetaOapg.properties.payPeriodMinimum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rate"]) -> MetaOapg.properties.rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rateCode"]) -> MetaOapg.properties.rateCode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["earningCode", "startDate", "agency", "amount", "annualMaximum", "calculationCode", "costCenter1", "costCenter2", "costCenter3", "effectiveDate", "endDate", "frequency", "goal", "hoursOrUnits", "isSelfInsured", "jobCode", "miscellaneousInfo", "paidTowardsGoal", "payPeriodMaximum", "payPeriodMinimum", "rate", "rateCode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["earningCode"]) -> MetaOapg.properties.earningCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["agency"]) -> typing.Union[MetaOapg.properties.agency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annualMaximum"]) -> typing.Union[MetaOapg.properties.annualMaximum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["calculationCode"]) -> typing.Union[MetaOapg.properties.calculationCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costCenter1"]) -> typing.Union[MetaOapg.properties.costCenter1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costCenter2"]) -> typing.Union[MetaOapg.properties.costCenter2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["costCenter3"]) -> typing.Union[MetaOapg.properties.costCenter3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["effectiveDate"]) -> typing.Union[MetaOapg.properties.effectiveDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequency"]) -> typing.Union[MetaOapg.properties.frequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["goal"]) -> typing.Union[MetaOapg.properties.goal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hoursOrUnits"]) -> typing.Union[MetaOapg.properties.hoursOrUnits, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSelfInsured"]) -> typing.Union[MetaOapg.properties.isSelfInsured, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobCode"]) -> typing.Union[MetaOapg.properties.jobCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["miscellaneousInfo"]) -> typing.Union[MetaOapg.properties.miscellaneousInfo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paidTowardsGoal"]) -> typing.Union[MetaOapg.properties.paidTowardsGoal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payPeriodMaximum"]) -> typing.Union[MetaOapg.properties.payPeriodMaximum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payPeriodMinimum"]) -> typing.Union[MetaOapg.properties.payPeriodMinimum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rate"]) -> typing.Union[MetaOapg.properties.rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rateCode"]) -> typing.Union[MetaOapg.properties.rateCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["earningCode", "startDate", "agency", "amount", "annualMaximum", "calculationCode", "costCenter1", "costCenter2", "costCenter3", "effectiveDate", "endDate", "frequency", "goal", "hoursOrUnits", "isSelfInsured", "jobCode", "miscellaneousInfo", "paidTowardsGoal", "payPeriodMaximum", "payPeriodMinimum", "rate", "rateCode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        startDate: typing.Union[MetaOapg.properties.startDate, dict, frozendict.frozendict, ],
        earningCode: typing.Union[MetaOapg.properties.earningCode, dict, frozendict.frozendict, ],
        agency: typing.Union[MetaOapg.properties.agency, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        annualMaximum: typing.Union[MetaOapg.properties.annualMaximum, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        calculationCode: typing.Union[MetaOapg.properties.calculationCode, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        costCenter1: typing.Union[MetaOapg.properties.costCenter1, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        costCenter2: typing.Union[MetaOapg.properties.costCenter2, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        costCenter3: typing.Union[MetaOapg.properties.costCenter3, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        effectiveDate: typing.Union[MetaOapg.properties.effectiveDate, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        frequency: typing.Union[MetaOapg.properties.frequency, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        goal: typing.Union[MetaOapg.properties.goal, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        hoursOrUnits: typing.Union[MetaOapg.properties.hoursOrUnits, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        isSelfInsured: typing.Union[MetaOapg.properties.isSelfInsured, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        jobCode: typing.Union[MetaOapg.properties.jobCode, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        miscellaneousInfo: typing.Union[MetaOapg.properties.miscellaneousInfo, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        paidTowardsGoal: typing.Union[MetaOapg.properties.paidTowardsGoal, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        payPeriodMaximum: typing.Union[MetaOapg.properties.payPeriodMaximum, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        payPeriodMinimum: typing.Union[MetaOapg.properties.payPeriodMinimum, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        rate: typing.Union[MetaOapg.properties.rate, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        rateCode: typing.Union[MetaOapg.properties.rateCode, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Earning':
        return super().__new__(
            cls,
            *args,
            startDate=startDate,
            earningCode=earningCode,
            agency=agency,
            amount=amount,
            annualMaximum=annualMaximum,
            calculationCode=calculationCode,
            costCenter1=costCenter1,
            costCenter2=costCenter2,
            costCenter3=costCenter3,
            effectiveDate=effectiveDate,
            endDate=endDate,
            frequency=frequency,
            goal=goal,
            hoursOrUnits=hoursOrUnits,
            isSelfInsured=isSelfInsured,
            jobCode=jobCode,
            miscellaneousInfo=miscellaneousInfo,
            paidTowardsGoal=paidTowardsGoal,
            payPeriodMaximum=payPeriodMaximum,
            payPeriodMinimum=payPeriodMinimum,
            rate=rate,
            rateCode=rateCode,
            _configuration=_configuration,
            **kwargs,
        )
