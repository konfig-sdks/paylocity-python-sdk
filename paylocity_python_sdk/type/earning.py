# coding: utf-8

"""
    WebLink API

    For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

    The version of the OpenAPI document: v2
    Contact: webservices@paylocity.com
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING


class RequiredEarning(TypedDict):
    # Earning code. Must match Company setup. <br  />Max length: 10
    earningCode: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Start date of an earning based on payroll calendar. Common formats are MM-DD-CCYY, CCYY-MM-DD.
    startDate: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

class OptionalEarning(TypedDict, total=False):
    # Third-party agency associated with earning. Must match Company setup.<br  />Max length: 10
    agency: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Value that matches CalculationCode to add to gross wages. For percentage (%), enter whole number (10 = 10%).  <br  />Decimal(12,2)
    amount: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Year to Date dollar amount not to be exceeded for an earning in the calendar year. Used only with company driven maximums. <br  />Decimal(12,2)
    annualMaximum: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Defines how earnings are calculated. Common values are *% (percentage of gross), flat (flat dollar amount)*. Defaulted to the Company setup calcCode for earning. <br  />Max length: 20
    calculationCode: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10
    costCenter1: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10
    costCenter2: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Cost Center associated with earning. Must match Company setup.<br  /> Max length: 10
    costCenter3: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Date earning is active. Defaulted to run date or check date based on Company setup. Common formats are MM-DD-CCYY, CCYY-MM-DD.
    effectiveDate: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Stop date of an earning. Common formats are MM-DD-CCYY, CCYY-MM-DD.
    endDate: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Needed if earning is applied differently from the payroll frequency (one time earning for example).<br  /> Max length: 5
    frequency: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Dollar amount. The employee earning will stop when the goal amount is reached.<br  /> Decimal(12,2)
    goal: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # The value is used in conjunction with the Rate field. When entering Group Term Life Insurance (GTL), it should contain the full amount of the group term life insurance policy. <br  /> Decimal(12,2)
    hoursOrUnits: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Used for ACA. If not entered, defaulted to Company earning setup.
    isSelfInsured: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Job code associated with earnings. Must match Company setup.<br  /> Max length: 20
    jobCode: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Information to print on the check stub if agency is set up for this earning. <br  />Max length: 50
    miscellaneousInfo: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Amount already paid to employee toward goal. <br  /> Decimal(12,2)
    paidTowardsGoal: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Maximum amount of the earning on a single paycheck. <br  /> Decimal(12,2)
    payPeriodMaximum: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Minimum amount of the earning on a single paycheck. <br  /> Decimal(12,2)
    payPeriodMinimum: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Rate is used in conjunction with the hoursOrUnits field. <br  /> Decimal(12,2)
    rate: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    # Rate Code applies to additional pay rates entered for an employee. Must match Company setup. <br  /> Max length: 10
    rateCode: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

class Earning(RequiredEarning, OptionalEarning):
    pass
