# coding: utf-8

"""
    WebLink API

    For documentation about this API, please visit https://developer.paylocity.com/integrations/reference/weblink-overview

    The version of the OpenAPI document: v2
    Contact: webservices@paylocity.com
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from paylocity_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from paylocity_python_sdk.api_response import AsyncGeneratorResponse
from paylocity_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from paylocity_python_sdk import schemas  # noqa: F401

from paylocity_python_sdk.model.employee_custom_text_fields import EmployeeCustomTextFields as EmployeeCustomTextFieldsSchema
from paylocity_python_sdk.model.employee_custom_drop_down_fields import EmployeeCustomDropDownFields as EmployeeCustomDropDownFieldsSchema
from paylocity_python_sdk.model.employee import Employee as EmployeeSchema
from paylocity_python_sdk.model.employee_custom_date_fields import EmployeeCustomDateFields as EmployeeCustomDateFieldsSchema
from paylocity_python_sdk.model.employee_update_employee_data500_response import EmployeeUpdateEmployeeData500Response as EmployeeUpdateEmployeeData500ResponseSchema
from paylocity_python_sdk.model.employee_update_employee_data_response import EmployeeUpdateEmployeeDataResponse as EmployeeUpdateEmployeeDataResponseSchema
from paylocity_python_sdk.model.employee_custom_number_fields import EmployeeCustomNumberFields as EmployeeCustomNumberFieldsSchema
from paylocity_python_sdk.model.employee_additional_direct_deposit import EmployeeAdditionalDirectDeposit as EmployeeAdditionalDirectDepositSchema
from paylocity_python_sdk.model.employee_emergency_contacts import EmployeeEmergencyContacts as EmployeeEmergencyContactsSchema
from paylocity_python_sdk.model.employee_custom_boolean_fields import EmployeeCustomBooleanFields as EmployeeCustomBooleanFieldsSchema
from paylocity_python_sdk.model.employee_additional_rate import EmployeeAdditionalRate as EmployeeAdditionalRateSchema
from paylocity_python_sdk.model.employee_local_tax import EmployeeLocalTax as EmployeeLocalTaxSchema

from paylocity_python_sdk.type.employee_additional_direct_deposit import EmployeeAdditionalDirectDeposit
from paylocity_python_sdk.type.employee_emergency_contacts import EmployeeEmergencyContacts
from paylocity_python_sdk.type.employee_additional_rate import EmployeeAdditionalRate
from paylocity_python_sdk.type.employee_local_tax import EmployeeLocalTax
from paylocity_python_sdk.type.employee_custom_boolean_fields import EmployeeCustomBooleanFields
from paylocity_python_sdk.type.employee_update_employee_data_response import EmployeeUpdateEmployeeDataResponse
from paylocity_python_sdk.type.employee_custom_date_fields import EmployeeCustomDateFields
from paylocity_python_sdk.type.employee_update_employee_data500_response import EmployeeUpdateEmployeeData500Response
from paylocity_python_sdk.type.employee_custom_drop_down_fields import EmployeeCustomDropDownFields
from paylocity_python_sdk.type.employee import Employee
from paylocity_python_sdk.type.employee_custom_text_fields import EmployeeCustomTextFields
from paylocity_python_sdk.type.employee_custom_number_fields import EmployeeCustomNumberFields

from ...api_client import Dictionary
from paylocity_python_sdk.pydantic.employee_custom_drop_down_fields import EmployeeCustomDropDownFields as EmployeeCustomDropDownFieldsPydantic
from paylocity_python_sdk.pydantic.employee_custom_number_fields import EmployeeCustomNumberFields as EmployeeCustomNumberFieldsPydantic
from paylocity_python_sdk.pydantic.employee_custom_boolean_fields import EmployeeCustomBooleanFields as EmployeeCustomBooleanFieldsPydantic
from paylocity_python_sdk.pydantic.employee_additional_direct_deposit import EmployeeAdditionalDirectDeposit as EmployeeAdditionalDirectDepositPydantic
from paylocity_python_sdk.pydantic.employee_emergency_contacts import EmployeeEmergencyContacts as EmployeeEmergencyContactsPydantic
from paylocity_python_sdk.pydantic.employee import Employee as EmployeePydantic
from paylocity_python_sdk.pydantic.employee_custom_text_fields import EmployeeCustomTextFields as EmployeeCustomTextFieldsPydantic
from paylocity_python_sdk.pydantic.employee_custom_date_fields import EmployeeCustomDateFields as EmployeeCustomDateFieldsPydantic
from paylocity_python_sdk.pydantic.employee_update_employee_data500_response import EmployeeUpdateEmployeeData500Response as EmployeeUpdateEmployeeData500ResponsePydantic
from paylocity_python_sdk.pydantic.employee_local_tax import EmployeeLocalTax as EmployeeLocalTaxPydantic
from paylocity_python_sdk.pydantic.employee_update_employee_data_response import EmployeeUpdateEmployeeDataResponse as EmployeeUpdateEmployeeDataResponsePydantic
from paylocity_python_sdk.pydantic.employee_additional_rate import EmployeeAdditionalRate as EmployeeAdditionalRatePydantic

from . import path

# Path params
CompanyIdSchema = schemas.StrSchema
EmployeeIdSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'companyId': typing.Union[CompanyIdSchema, str, ],
        'employeeId': typing.Union[EmployeeIdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_company_id = api_client.PathParameter(
    name="companyId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=CompanyIdSchema,
    required=True,
)
request_path_employee_id = api_client.PathParameter(
    name="employeeId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=EmployeeIdSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = EmployeeSchema


request_body_json = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
_auth = [
    'paylocity_auth',
]


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: 


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: 


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
)
SchemaFor400ResponseBodyApplicationJson = EmployeeUpdateEmployeeDataResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: EmployeeUpdateEmployeeDataResponse


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: EmployeeUpdateEmployeeDataResponse


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    body: 


@dataclass
class ApiResponseFor401Async(api_client.AsyncApiResponse):
    body: 


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    response_cls_async=ApiResponseFor401Async,
)


@dataclass
class ApiResponseFor403(api_client.ApiResponse):
    body: 


@dataclass
class ApiResponseFor403Async(api_client.AsyncApiResponse):
    body: 


_response_for_403 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor403,
    response_cls_async=ApiResponseFor403Async,
)


@dataclass
class ApiResponseFor429(api_client.ApiResponse):
    body: 


@dataclass
class ApiResponseFor429Async(api_client.AsyncApiResponse):
    body: 


_response_for_429 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor429,
    response_cls_async=ApiResponseFor429Async,
)
SchemaFor500ResponseBodyApplicationJson = EmployeeUpdateEmployeeData500ResponseSchema


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: EmployeeUpdateEmployeeData500Response


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: EmployeeUpdateEmployeeData500Response


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    '400': _response_for_400,
    '401': _response_for_401,
    '403': _response_for_403,
    '429': _response_for_429,
    '500': _response_for_500,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _update_employee_data_mapped_args(
        self,
        company_id: str,
        employee_id: str,
        additional_direct_deposit: typing.Optional[EmployeeAdditionalDirectDeposit] = None,
        additional_rate: typing.Optional[EmployeeAdditionalRate] = None,
        benefit_setup: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        birth_date: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        company_fein: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        company_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        currency: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        custom_boolean_fields: typing.Optional[EmployeeCustomBooleanFields] = None,
        custom_date_fields: typing.Optional[EmployeeCustomDateFields] = None,
        custom_drop_down_fields: typing.Optional[EmployeeCustomDropDownFields] = None,
        custom_number_fields: typing.Optional[EmployeeCustomNumberFields] = None,
        custom_text_fields: typing.Optional[EmployeeCustomTextFields] = None,
        department_position: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        disability_description: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        emergency_contacts: typing.Optional[EmployeeEmergencyContacts] = None,
        employee_id: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        ethnicity: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        federal_tax: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        first_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        gender: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        home_address: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        is_highly_compensated: typing.Optional[bool] = None,
        is_smoker: typing.Optional[bool] = None,
        last_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        local_tax: typing.Optional[EmployeeLocalTax] = None,
        main_direct_deposit: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        marital_status: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        middle_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        non_primary_state_tax: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        owner_percent: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        preferred_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        primary_pay_rate: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        primary_state_tax: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        prior_last_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        salutation: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        ssn: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        status: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        suffix: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        tax_setup: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        veteran_description: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        web_time: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        work_address: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        work_eligibility: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _path_params = {}
        _body = {}
        if additional_direct_deposit is not None:
            _body["additionalDirectDeposit"] = additional_direct_deposit
        if additional_rate is not None:
            _body["additionalRate"] = additional_rate
        if benefit_setup is not None:
            _body["benefitSetup"] = benefit_setup
        if birth_date is not None:
            _body["birthDate"] = birth_date
        if company_fein is not None:
            _body["companyFEIN"] = company_fein
        if company_name is not None:
            _body["companyName"] = company_name
        if currency is not None:
            _body["currency"] = currency
        if custom_boolean_fields is not None:
            _body["customBooleanFields"] = custom_boolean_fields
        if custom_date_fields is not None:
            _body["customDateFields"] = custom_date_fields
        if custom_drop_down_fields is not None:
            _body["customDropDownFields"] = custom_drop_down_fields
        if custom_number_fields is not None:
            _body["customNumberFields"] = custom_number_fields
        if custom_text_fields is not None:
            _body["customTextFields"] = custom_text_fields
        if department_position is not None:
            _body["departmentPosition"] = department_position
        if disability_description is not None:
            _body["disabilityDescription"] = disability_description
        if emergency_contacts is not None:
            _body["emergencyContacts"] = emergency_contacts
        if employee_id is not None:
            _body["employeeId"] = employee_id
        if ethnicity is not None:
            _body["ethnicity"] = ethnicity
        if federal_tax is not None:
            _body["federalTax"] = federal_tax
        if first_name is not None:
            _body["firstName"] = first_name
        if gender is not None:
            _body["gender"] = gender
        if home_address is not None:
            _body["homeAddress"] = home_address
        if is_highly_compensated is not None:
            _body["isHighlyCompensated"] = is_highly_compensated
        if is_smoker is not None:
            _body["isSmoker"] = is_smoker
        if last_name is not None:
            _body["lastName"] = last_name
        if local_tax is not None:
            _body["localTax"] = local_tax
        if main_direct_deposit is not None:
            _body["mainDirectDeposit"] = main_direct_deposit
        if marital_status is not None:
            _body["maritalStatus"] = marital_status
        if middle_name is not None:
            _body["middleName"] = middle_name
        if non_primary_state_tax is not None:
            _body["nonPrimaryStateTax"] = non_primary_state_tax
        if owner_percent is not None:
            _body["ownerPercent"] = owner_percent
        if preferred_name is not None:
            _body["preferredName"] = preferred_name
        if primary_pay_rate is not None:
            _body["primaryPayRate"] = primary_pay_rate
        if primary_state_tax is not None:
            _body["primaryStateTax"] = primary_state_tax
        if prior_last_name is not None:
            _body["priorLastName"] = prior_last_name
        if salutation is not None:
            _body["salutation"] = salutation
        if ssn is not None:
            _body["ssn"] = ssn
        if status is not None:
            _body["status"] = status
        if suffix is not None:
            _body["suffix"] = suffix
        if tax_setup is not None:
            _body["taxSetup"] = tax_setup
        if veteran_description is not None:
            _body["veteranDescription"] = veteran_description
        if web_time is not None:
            _body["webTime"] = web_time
        if work_address is not None:
            _body["workAddress"] = work_address
        if work_eligibility is not None:
            _body["workEligibility"] = work_eligibility
        args.body = _body
        if company_id is not None:
            _path_params["companyId"] = company_id
        if employee_id is not None:
            _path_params["employeeId"] = employee_id
        args.path = _path_params
        return args

    async def _aupdate_employee_data_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Update employee
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
            request_path_employee_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'patch'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/companies/{companyId}/employees/{employeeId}',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_json.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _update_employee_data_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Update employee
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_company_id,
            request_path_employee_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'patch'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v2/companies/{companyId}/employees/{employeeId}',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_json.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class UpdateEmployeeDataRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aupdate_employee_data(
        self,
        company_id: str,
        employee_id: str,
        additional_direct_deposit: typing.Optional[EmployeeAdditionalDirectDeposit] = None,
        additional_rate: typing.Optional[EmployeeAdditionalRate] = None,
        benefit_setup: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        birth_date: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        company_fein: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        company_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        currency: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        custom_boolean_fields: typing.Optional[EmployeeCustomBooleanFields] = None,
        custom_date_fields: typing.Optional[EmployeeCustomDateFields] = None,
        custom_drop_down_fields: typing.Optional[EmployeeCustomDropDownFields] = None,
        custom_number_fields: typing.Optional[EmployeeCustomNumberFields] = None,
        custom_text_fields: typing.Optional[EmployeeCustomTextFields] = None,
        department_position: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        disability_description: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        emergency_contacts: typing.Optional[EmployeeEmergencyContacts] = None,
        employee_id: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        ethnicity: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        federal_tax: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        first_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        gender: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        home_address: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        is_highly_compensated: typing.Optional[bool] = None,
        is_smoker: typing.Optional[bool] = None,
        last_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        local_tax: typing.Optional[EmployeeLocalTax] = None,
        main_direct_deposit: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        marital_status: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        middle_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        non_primary_state_tax: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        owner_percent: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        preferred_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        primary_pay_rate: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        primary_state_tax: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        prior_last_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        salutation: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        ssn: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        status: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        suffix: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        tax_setup: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        veteran_description: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        web_time: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        work_address: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        work_eligibility: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_employee_data_mapped_args(
            company_id=company_id,
            employee_id=employee_id,
            additional_direct_deposit=additional_direct_deposit,
            additional_rate=additional_rate,
            benefit_setup=benefit_setup,
            birth_date=birth_date,
            company_fein=company_fein,
            company_name=company_name,
            currency=currency,
            custom_boolean_fields=custom_boolean_fields,
            custom_date_fields=custom_date_fields,
            custom_drop_down_fields=custom_drop_down_fields,
            custom_number_fields=custom_number_fields,
            custom_text_fields=custom_text_fields,
            department_position=department_position,
            disability_description=disability_description,
            emergency_contacts=emergency_contacts,
            employee_id=employee_id,
            ethnicity=ethnicity,
            federal_tax=federal_tax,
            first_name=first_name,
            gender=gender,
            home_address=home_address,
            is_highly_compensated=is_highly_compensated,
            is_smoker=is_smoker,
            last_name=last_name,
            local_tax=local_tax,
            main_direct_deposit=main_direct_deposit,
            marital_status=marital_status,
            middle_name=middle_name,
            non_primary_state_tax=non_primary_state_tax,
            owner_percent=owner_percent,
            preferred_name=preferred_name,
            primary_pay_rate=primary_pay_rate,
            primary_state_tax=primary_state_tax,
            prior_last_name=prior_last_name,
            salutation=salutation,
            ssn=ssn,
            status=status,
            suffix=suffix,
            tax_setup=tax_setup,
            veteran_description=veteran_description,
            web_time=web_time,
            work_address=work_address,
            work_eligibility=work_eligibility,
        )
        return await self._aupdate_employee_data_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def update_employee_data(
        self,
        company_id: str,
        employee_id: str,
        additional_direct_deposit: typing.Optional[EmployeeAdditionalDirectDeposit] = None,
        additional_rate: typing.Optional[EmployeeAdditionalRate] = None,
        benefit_setup: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        birth_date: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        company_fein: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        company_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        currency: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        custom_boolean_fields: typing.Optional[EmployeeCustomBooleanFields] = None,
        custom_date_fields: typing.Optional[EmployeeCustomDateFields] = None,
        custom_drop_down_fields: typing.Optional[EmployeeCustomDropDownFields] = None,
        custom_number_fields: typing.Optional[EmployeeCustomNumberFields] = None,
        custom_text_fields: typing.Optional[EmployeeCustomTextFields] = None,
        department_position: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        disability_description: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        emergency_contacts: typing.Optional[EmployeeEmergencyContacts] = None,
        employee_id: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        ethnicity: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        federal_tax: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        first_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        gender: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        home_address: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        is_highly_compensated: typing.Optional[bool] = None,
        is_smoker: typing.Optional[bool] = None,
        last_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        local_tax: typing.Optional[EmployeeLocalTax] = None,
        main_direct_deposit: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        marital_status: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        middle_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        non_primary_state_tax: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        owner_percent: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        preferred_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        primary_pay_rate: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        primary_state_tax: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        prior_last_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        salutation: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        ssn: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        status: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        suffix: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        tax_setup: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        veteran_description: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        web_time: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        work_address: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        work_eligibility: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_employee_data_mapped_args(
            company_id=company_id,
            employee_id=employee_id,
            additional_direct_deposit=additional_direct_deposit,
            additional_rate=additional_rate,
            benefit_setup=benefit_setup,
            birth_date=birth_date,
            company_fein=company_fein,
            company_name=company_name,
            currency=currency,
            custom_boolean_fields=custom_boolean_fields,
            custom_date_fields=custom_date_fields,
            custom_drop_down_fields=custom_drop_down_fields,
            custom_number_fields=custom_number_fields,
            custom_text_fields=custom_text_fields,
            department_position=department_position,
            disability_description=disability_description,
            emergency_contacts=emergency_contacts,
            employee_id=employee_id,
            ethnicity=ethnicity,
            federal_tax=federal_tax,
            first_name=first_name,
            gender=gender,
            home_address=home_address,
            is_highly_compensated=is_highly_compensated,
            is_smoker=is_smoker,
            last_name=last_name,
            local_tax=local_tax,
            main_direct_deposit=main_direct_deposit,
            marital_status=marital_status,
            middle_name=middle_name,
            non_primary_state_tax=non_primary_state_tax,
            owner_percent=owner_percent,
            preferred_name=preferred_name,
            primary_pay_rate=primary_pay_rate,
            primary_state_tax=primary_state_tax,
            prior_last_name=prior_last_name,
            salutation=salutation,
            ssn=ssn,
            status=status,
            suffix=suffix,
            tax_setup=tax_setup,
            veteran_description=veteran_description,
            web_time=web_time,
            work_address=work_address,
            work_eligibility=work_eligibility,
        )
        return self._update_employee_data_oapg(
            body=args.body,
            path_params=args.path,
        )

class UpdateEmployeeData(BaseApi):

    async def aupdate_employee_data(
        self,
        company_id: str,
        employee_id: str,
        additional_direct_deposit: typing.Optional[EmployeeAdditionalDirectDeposit] = None,
        additional_rate: typing.Optional[EmployeeAdditionalRate] = None,
        benefit_setup: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        birth_date: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        company_fein: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        company_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        currency: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        custom_boolean_fields: typing.Optional[EmployeeCustomBooleanFields] = None,
        custom_date_fields: typing.Optional[EmployeeCustomDateFields] = None,
        custom_drop_down_fields: typing.Optional[EmployeeCustomDropDownFields] = None,
        custom_number_fields: typing.Optional[EmployeeCustomNumberFields] = None,
        custom_text_fields: typing.Optional[EmployeeCustomTextFields] = None,
        department_position: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        disability_description: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        emergency_contacts: typing.Optional[EmployeeEmergencyContacts] = None,
        employee_id: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        ethnicity: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        federal_tax: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        first_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        gender: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        home_address: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        is_highly_compensated: typing.Optional[bool] = None,
        is_smoker: typing.Optional[bool] = None,
        last_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        local_tax: typing.Optional[EmployeeLocalTax] = None,
        main_direct_deposit: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        marital_status: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        middle_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        non_primary_state_tax: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        owner_percent: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        preferred_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        primary_pay_rate: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        primary_state_tax: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        prior_last_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        salutation: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        ssn: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        status: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        suffix: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        tax_setup: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        veteran_description: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        web_time: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        work_address: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        work_eligibility: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        validate: bool = False,
        **kwargs,
    ) -> None:
        raw_response = await self.raw.aupdate_employee_data(
            company_id=company_id,
            employee_id=employee_id,
            additional_direct_deposit=additional_direct_deposit,
            additional_rate=additional_rate,
            benefit_setup=benefit_setup,
            birth_date=birth_date,
            company_fein=company_fein,
            company_name=company_name,
            currency=currency,
            custom_boolean_fields=custom_boolean_fields,
            custom_date_fields=custom_date_fields,
            custom_drop_down_fields=custom_drop_down_fields,
            custom_number_fields=custom_number_fields,
            custom_text_fields=custom_text_fields,
            department_position=department_position,
            disability_description=disability_description,
            emergency_contacts=emergency_contacts,
            employee_id=employee_id,
            ethnicity=ethnicity,
            federal_tax=federal_tax,
            first_name=first_name,
            gender=gender,
            home_address=home_address,
            is_highly_compensated=is_highly_compensated,
            is_smoker=is_smoker,
            last_name=last_name,
            local_tax=local_tax,
            main_direct_deposit=main_direct_deposit,
            marital_status=marital_status,
            middle_name=middle_name,
            non_primary_state_tax=non_primary_state_tax,
            owner_percent=owner_percent,
            preferred_name=preferred_name,
            primary_pay_rate=primary_pay_rate,
            primary_state_tax=primary_state_tax,
            prior_last_name=prior_last_name,
            salutation=salutation,
            ssn=ssn,
            status=status,
            suffix=suffix,
            tax_setup=tax_setup,
            veteran_description=veteran_description,
            web_time=web_time,
            work_address=work_address,
            work_eligibility=work_eligibility,
            **kwargs,
        )
    
    
    def update_employee_data(
        self,
        company_id: str,
        employee_id: str,
        additional_direct_deposit: typing.Optional[EmployeeAdditionalDirectDeposit] = None,
        additional_rate: typing.Optional[EmployeeAdditionalRate] = None,
        benefit_setup: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        birth_date: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        company_fein: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        company_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        currency: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        custom_boolean_fields: typing.Optional[EmployeeCustomBooleanFields] = None,
        custom_date_fields: typing.Optional[EmployeeCustomDateFields] = None,
        custom_drop_down_fields: typing.Optional[EmployeeCustomDropDownFields] = None,
        custom_number_fields: typing.Optional[EmployeeCustomNumberFields] = None,
        custom_text_fields: typing.Optional[EmployeeCustomTextFields] = None,
        department_position: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        disability_description: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        emergency_contacts: typing.Optional[EmployeeEmergencyContacts] = None,
        employee_id: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        ethnicity: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        federal_tax: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        first_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        gender: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        home_address: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        is_highly_compensated: typing.Optional[bool] = None,
        is_smoker: typing.Optional[bool] = None,
        last_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        local_tax: typing.Optional[EmployeeLocalTax] = None,
        main_direct_deposit: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        marital_status: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        middle_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        non_primary_state_tax: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        owner_percent: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        preferred_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        primary_pay_rate: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        primary_state_tax: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        prior_last_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        salutation: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        ssn: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        status: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        suffix: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        tax_setup: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        veteran_description: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        web_time: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        work_address: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        work_eligibility: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        validate: bool = False,
    ) -> None:
        raw_response = self.raw.update_employee_data(
            company_id=company_id,
            employee_id=employee_id,
            additional_direct_deposit=additional_direct_deposit,
            additional_rate=additional_rate,
            benefit_setup=benefit_setup,
            birth_date=birth_date,
            company_fein=company_fein,
            company_name=company_name,
            currency=currency,
            custom_boolean_fields=custom_boolean_fields,
            custom_date_fields=custom_date_fields,
            custom_drop_down_fields=custom_drop_down_fields,
            custom_number_fields=custom_number_fields,
            custom_text_fields=custom_text_fields,
            department_position=department_position,
            disability_description=disability_description,
            emergency_contacts=emergency_contacts,
            employee_id=employee_id,
            ethnicity=ethnicity,
            federal_tax=federal_tax,
            first_name=first_name,
            gender=gender,
            home_address=home_address,
            is_highly_compensated=is_highly_compensated,
            is_smoker=is_smoker,
            last_name=last_name,
            local_tax=local_tax,
            main_direct_deposit=main_direct_deposit,
            marital_status=marital_status,
            middle_name=middle_name,
            non_primary_state_tax=non_primary_state_tax,
            owner_percent=owner_percent,
            preferred_name=preferred_name,
            primary_pay_rate=primary_pay_rate,
            primary_state_tax=primary_state_tax,
            prior_last_name=prior_last_name,
            salutation=salutation,
            ssn=ssn,
            status=status,
            suffix=suffix,
            tax_setup=tax_setup,
            veteran_description=veteran_description,
            web_time=web_time,
            work_address=work_address,
            work_eligibility=work_eligibility,
        )


class ApiForpatch(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apatch(
        self,
        company_id: str,
        employee_id: str,
        additional_direct_deposit: typing.Optional[EmployeeAdditionalDirectDeposit] = None,
        additional_rate: typing.Optional[EmployeeAdditionalRate] = None,
        benefit_setup: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        birth_date: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        company_fein: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        company_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        currency: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        custom_boolean_fields: typing.Optional[EmployeeCustomBooleanFields] = None,
        custom_date_fields: typing.Optional[EmployeeCustomDateFields] = None,
        custom_drop_down_fields: typing.Optional[EmployeeCustomDropDownFields] = None,
        custom_number_fields: typing.Optional[EmployeeCustomNumberFields] = None,
        custom_text_fields: typing.Optional[EmployeeCustomTextFields] = None,
        department_position: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        disability_description: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        emergency_contacts: typing.Optional[EmployeeEmergencyContacts] = None,
        employee_id: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        ethnicity: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        federal_tax: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        first_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        gender: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        home_address: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        is_highly_compensated: typing.Optional[bool] = None,
        is_smoker: typing.Optional[bool] = None,
        last_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        local_tax: typing.Optional[EmployeeLocalTax] = None,
        main_direct_deposit: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        marital_status: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        middle_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        non_primary_state_tax: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        owner_percent: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        preferred_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        primary_pay_rate: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        primary_state_tax: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        prior_last_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        salutation: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        ssn: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        status: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        suffix: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        tax_setup: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        veteran_description: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        web_time: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        work_address: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        work_eligibility: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._update_employee_data_mapped_args(
            company_id=company_id,
            employee_id=employee_id,
            additional_direct_deposit=additional_direct_deposit,
            additional_rate=additional_rate,
            benefit_setup=benefit_setup,
            birth_date=birth_date,
            company_fein=company_fein,
            company_name=company_name,
            currency=currency,
            custom_boolean_fields=custom_boolean_fields,
            custom_date_fields=custom_date_fields,
            custom_drop_down_fields=custom_drop_down_fields,
            custom_number_fields=custom_number_fields,
            custom_text_fields=custom_text_fields,
            department_position=department_position,
            disability_description=disability_description,
            emergency_contacts=emergency_contacts,
            employee_id=employee_id,
            ethnicity=ethnicity,
            federal_tax=federal_tax,
            first_name=first_name,
            gender=gender,
            home_address=home_address,
            is_highly_compensated=is_highly_compensated,
            is_smoker=is_smoker,
            last_name=last_name,
            local_tax=local_tax,
            main_direct_deposit=main_direct_deposit,
            marital_status=marital_status,
            middle_name=middle_name,
            non_primary_state_tax=non_primary_state_tax,
            owner_percent=owner_percent,
            preferred_name=preferred_name,
            primary_pay_rate=primary_pay_rate,
            primary_state_tax=primary_state_tax,
            prior_last_name=prior_last_name,
            salutation=salutation,
            ssn=ssn,
            status=status,
            suffix=suffix,
            tax_setup=tax_setup,
            veteran_description=veteran_description,
            web_time=web_time,
            work_address=work_address,
            work_eligibility=work_eligibility,
        )
        return await self._aupdate_employee_data_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def patch(
        self,
        company_id: str,
        employee_id: str,
        additional_direct_deposit: typing.Optional[EmployeeAdditionalDirectDeposit] = None,
        additional_rate: typing.Optional[EmployeeAdditionalRate] = None,
        benefit_setup: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        birth_date: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        company_fein: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        company_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        currency: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        custom_boolean_fields: typing.Optional[EmployeeCustomBooleanFields] = None,
        custom_date_fields: typing.Optional[EmployeeCustomDateFields] = None,
        custom_drop_down_fields: typing.Optional[EmployeeCustomDropDownFields] = None,
        custom_number_fields: typing.Optional[EmployeeCustomNumberFields] = None,
        custom_text_fields: typing.Optional[EmployeeCustomTextFields] = None,
        department_position: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        disability_description: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        emergency_contacts: typing.Optional[EmployeeEmergencyContacts] = None,
        employee_id: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        ethnicity: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        federal_tax: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        first_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        gender: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        home_address: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        is_highly_compensated: typing.Optional[bool] = None,
        is_smoker: typing.Optional[bool] = None,
        last_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        local_tax: typing.Optional[EmployeeLocalTax] = None,
        main_direct_deposit: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        marital_status: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        middle_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        non_primary_state_tax: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        owner_percent: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        preferred_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        primary_pay_rate: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        primary_state_tax: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        prior_last_name: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        salutation: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        ssn: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        status: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        suffix: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        tax_setup: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        veteran_description: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        web_time: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        work_address: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        work_eligibility: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._update_employee_data_mapped_args(
            company_id=company_id,
            employee_id=employee_id,
            additional_direct_deposit=additional_direct_deposit,
            additional_rate=additional_rate,
            benefit_setup=benefit_setup,
            birth_date=birth_date,
            company_fein=company_fein,
            company_name=company_name,
            currency=currency,
            custom_boolean_fields=custom_boolean_fields,
            custom_date_fields=custom_date_fields,
            custom_drop_down_fields=custom_drop_down_fields,
            custom_number_fields=custom_number_fields,
            custom_text_fields=custom_text_fields,
            department_position=department_position,
            disability_description=disability_description,
            emergency_contacts=emergency_contacts,
            employee_id=employee_id,
            ethnicity=ethnicity,
            federal_tax=federal_tax,
            first_name=first_name,
            gender=gender,
            home_address=home_address,
            is_highly_compensated=is_highly_compensated,
            is_smoker=is_smoker,
            last_name=last_name,
            local_tax=local_tax,
            main_direct_deposit=main_direct_deposit,
            marital_status=marital_status,
            middle_name=middle_name,
            non_primary_state_tax=non_primary_state_tax,
            owner_percent=owner_percent,
            preferred_name=preferred_name,
            primary_pay_rate=primary_pay_rate,
            primary_state_tax=primary_state_tax,
            prior_last_name=prior_last_name,
            salutation=salutation,
            ssn=ssn,
            status=status,
            suffix=suffix,
            tax_setup=tax_setup,
            veteran_description=veteran_description,
            web_time=web_time,
            work_address=work_address,
            work_eligibility=work_eligibility,
        )
        return self._update_employee_data_oapg(
            body=args.body,
            path_params=args.path,
        )

